syntax = 'proto3';

package api;

import "google/protobuf/empty.proto";
import "k8s.io/api/core/v1/generated.proto";
import "google/api/annotations.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";

option (gogoproto.goproto_stringer_all) = false;
option (gogoproto.stringer_all) = true;


message JobSubmitRequestItem {
    double Priority = 1;
    string Namespace = 3;
    map<string, string> Labels = 4;
    map<string, string> Annotations = 5;
    map<string, string> RequiredNodeLabels = 6 [deprecated = true]; // Use PodSpec.NodeSelector instead
    k8s.io.api.core.v1.PodSpec PodSpec = 2;
}

// swagger:model
message JobSubmitRequest {
    string Queue = 1;
    string JobSetId = 2;
    repeated JobSubmitRequestItem JobRequestItems = 3;
}

// swagger:model
message JobCancelRequest {
    string JobId = 1;
    string JobSetId = 2;
    string Queue = 3;
}

message JobSubmitResponseItem {
    string JobId = 1;
    string Error = 2;
}

// swagger:model
message JobSubmitResponse {
    repeated JobSubmitResponseItem JobResponseItems = 1;
}

// swagger:model
message Queue {
    string Name = 1;
    double PriorityFactor = 2;
    repeated string UserOwners = 3;
    repeated string GroupOwners = 4;
    map<string, double> ResourceLimits = 5;
}

// swagger:model
message CancellationResult {
    repeated string CancelledIds = 1;
}

//swagger:model
message QueueInfoRequest {
    string Name = 1;
}

//swagger:model
message QueueInfo {
    string Name = 1;
    repeated JobSetInfo ActiveJobSets = 2;
}

message JobSetInfo {
    string Name = 1;
    int32 QueuedJobs = 2;
    int32 LeasedJobs = 3;
}

service Submit {
    rpc SubmitJobs (JobSubmitRequest) returns (JobSubmitResponse) {
        option (google.api.http) = {
            post: "/v1/job/submit"
            body: "*"
        };
    }
    rpc CancelJobs (JobCancelRequest) returns (CancellationResult) {
        option (google.api.http) = {
            post: "/v1/job/cancel"
            body: "*"
        };
    }
    rpc CreateQueue (Queue) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            put: "/v1/queue/{Name}"
            body: "*"
        };
    }
    rpc GetQueueInfo (QueueInfoRequest) returns (QueueInfo) {
        option (google.api.http) = {
            get: "/v1/queue/{Name}"
        };
    }
}
