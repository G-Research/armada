// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pkg/api/lookout/lookout.proto

package lookout

import (
	context "context"
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
	time "time"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	types "github.com/gogo/protobuf/types"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"

	api "github.com/G-Research/armada/pkg/api"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type JobState int32

const (
	JobState_QUEUED    JobState = 0
	JobState_PENDING   JobState = 1
	JobState_RUNNING   JobState = 2
	JobState_SUCCEEDED JobState = 3
	JobState_FAILED    JobState = 4
	JobState_CANCELLED JobState = 5
)

var JobState_name = map[int32]string{
	0: "QUEUED",
	1: "PENDING",
	2: "RUNNING",
	3: "SUCCEEDED",
	4: "FAILED",
	5: "CANCELLED",
}

var JobState_value = map[string]int32{
	"QUEUED":    0,
	"PENDING":   1,
	"RUNNING":   2,
	"SUCCEEDED": 3,
	"FAILED":    4,
	"CANCELLED": 5,
}

func (x JobState) String() string {
	return proto.EnumName(JobState_name, int32(x))
}

func (JobState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6ee7620a6fb9cfb1, []int{0}
}

type SystemOverview struct {
	Queues []*QueueInfo `protobuf:"bytes,1,rep,name=queues,proto3" json:"queues,omitempty"`
}

func (m *SystemOverview) Reset()      { *m = SystemOverview{} }
func (*SystemOverview) ProtoMessage() {}
func (*SystemOverview) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ee7620a6fb9cfb1, []int{0}
}
func (m *SystemOverview) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SystemOverview) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SystemOverview.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SystemOverview) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SystemOverview.Merge(m, src)
}
func (m *SystemOverview) XXX_Size() int {
	return m.Size()
}
func (m *SystemOverview) XXX_DiscardUnknown() {
	xxx_messageInfo_SystemOverview.DiscardUnknown(m)
}

var xxx_messageInfo_SystemOverview proto.InternalMessageInfo

func (m *SystemOverview) GetQueues() []*QueueInfo {
	if m != nil {
		return m.Queues
	}
	return nil
}

type JobInfo struct {
	Job       *api.Job   `protobuf:"bytes,1,opt,name=job,proto3" json:"job,omitempty"`
	Runs      []*RunInfo `protobuf:"bytes,2,rep,name=runs,proto3" json:"runs,omitempty"`
	Cancelled *time.Time `protobuf:"bytes,3,opt,name=cancelled,proto3,stdtime" json:"cancelled,omitempty"`
	JobState  JobState   `protobuf:"varint,4,opt,name=job_state,json=jobState,proto3,enum=lookout.JobState" json:"jobState,omitempty"`
}

func (m *JobInfo) Reset()      { *m = JobInfo{} }
func (*JobInfo) ProtoMessage() {}
func (*JobInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ee7620a6fb9cfb1, []int{1}
}
func (m *JobInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JobInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JobInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JobInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobInfo.Merge(m, src)
}
func (m *JobInfo) XXX_Size() int {
	return m.Size()
}
func (m *JobInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_JobInfo.DiscardUnknown(m)
}

var xxx_messageInfo_JobInfo proto.InternalMessageInfo

func (m *JobInfo) GetJob() *api.Job {
	if m != nil {
		return m.Job
	}
	return nil
}

func (m *JobInfo) GetRuns() []*RunInfo {
	if m != nil {
		return m.Runs
	}
	return nil
}

func (m *JobInfo) GetCancelled() *time.Time {
	if m != nil {
		return m.Cancelled
	}
	return nil
}

func (m *JobInfo) GetJobState() JobState {
	if m != nil {
		return m.JobState
	}
	return JobState_QUEUED
}

type RunInfo struct {
	K8SId     string     `protobuf:"bytes,1,opt,name=k8s_id,json=k8sId,proto3" json:"k8sId,omitempty"`
	Cluster   string     `protobuf:"bytes,2,opt,name=cluster,proto3" json:"cluster,omitempty"`
	Node      string     `protobuf:"bytes,3,opt,name=node,proto3" json:"node,omitempty"`
	Succeeded bool       `protobuf:"varint,4,opt,name=succeeded,proto3" json:"succeeded,omitempty"`
	Error     string     `protobuf:"bytes,5,opt,name=error,proto3" json:"error,omitempty"`
	Created   *time.Time `protobuf:"bytes,6,opt,name=created,proto3,stdtime" json:"created,omitempty"`
	Started   *time.Time `protobuf:"bytes,7,opt,name=started,proto3,stdtime" json:"started,omitempty"`
	Finished  *time.Time `protobuf:"bytes,8,opt,name=finished,proto3,stdtime" json:"finished,omitempty"`
}

func (m *RunInfo) Reset()      { *m = RunInfo{} }
func (*RunInfo) ProtoMessage() {}
func (*RunInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ee7620a6fb9cfb1, []int{2}
}
func (m *RunInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RunInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RunInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RunInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RunInfo.Merge(m, src)
}
func (m *RunInfo) XXX_Size() int {
	return m.Size()
}
func (m *RunInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_RunInfo.DiscardUnknown(m)
}

var xxx_messageInfo_RunInfo proto.InternalMessageInfo

func (m *RunInfo) GetK8SId() string {
	if m != nil {
		return m.K8SId
	}
	return ""
}

func (m *RunInfo) GetCluster() string {
	if m != nil {
		return m.Cluster
	}
	return ""
}

func (m *RunInfo) GetNode() string {
	if m != nil {
		return m.Node
	}
	return ""
}

func (m *RunInfo) GetSucceeded() bool {
	if m != nil {
		return m.Succeeded
	}
	return false
}

func (m *RunInfo) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *RunInfo) GetCreated() *time.Time {
	if m != nil {
		return m.Created
	}
	return nil
}

func (m *RunInfo) GetStarted() *time.Time {
	if m != nil {
		return m.Started
	}
	return nil
}

func (m *RunInfo) GetFinished() *time.Time {
	if m != nil {
		return m.Finished
	}
	return nil
}

type QueueInfo struct {
	Queue             string   `protobuf:"bytes,1,opt,name=queue,proto3" json:"queue,omitempty"`
	JobsQueued        uint32   `protobuf:"varint,2,opt,name=jobs_queued,json=jobsQueued,proto3" json:"jobsQueued,omitempty"`
	JobsPending       uint32   `protobuf:"varint,3,opt,name=jobs_pending,json=jobsPending,proto3" json:"jobsPending,omitempty"`
	JobsRunning       uint32   `protobuf:"varint,4,opt,name=jobs_running,json=jobsRunning,proto3" json:"jobsRunning,omitempty"`
	OldestQueuedJob   *JobInfo `protobuf:"bytes,5,opt,name=oldest_queued_job,json=oldestQueuedJob,proto3" json:"oldestQueuedJob,omitempty"`
	LongestRunningJob *JobInfo `protobuf:"bytes,6,opt,name=longest_running_job,json=longestRunningJob,proto3" json:"longestRunningJob,omitempty"`
}

func (m *QueueInfo) Reset()      { *m = QueueInfo{} }
func (*QueueInfo) ProtoMessage() {}
func (*QueueInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ee7620a6fb9cfb1, []int{3}
}
func (m *QueueInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueueInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueueInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueueInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueueInfo.Merge(m, src)
}
func (m *QueueInfo) XXX_Size() int {
	return m.Size()
}
func (m *QueueInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_QueueInfo.DiscardUnknown(m)
}

var xxx_messageInfo_QueueInfo proto.InternalMessageInfo

func (m *QueueInfo) GetQueue() string {
	if m != nil {
		return m.Queue
	}
	return ""
}

func (m *QueueInfo) GetJobsQueued() uint32 {
	if m != nil {
		return m.JobsQueued
	}
	return 0
}

func (m *QueueInfo) GetJobsPending() uint32 {
	if m != nil {
		return m.JobsPending
	}
	return 0
}

func (m *QueueInfo) GetJobsRunning() uint32 {
	if m != nil {
		return m.JobsRunning
	}
	return 0
}

func (m *QueueInfo) GetOldestQueuedJob() *JobInfo {
	if m != nil {
		return m.OldestQueuedJob
	}
	return nil
}

func (m *QueueInfo) GetLongestRunningJob() *JobInfo {
	if m != nil {
		return m.LongestRunningJob
	}
	return nil
}

type GetJobsInQueueRequest struct {
	Queue       string     `protobuf:"bytes,1,opt,name=queue,proto3" json:"queue,omitempty"`
	NewestFirst bool       `protobuf:"varint,2,opt,name=newest_first,json=newestFirst,proto3" json:"newestFirst,omitempty"`
	JobStates   []JobState `protobuf:"varint,3,rep,packed,name=job_states,json=jobStates,proto3,enum=lookout.JobState" json:"jobStates,omitempty"`
	JobSetIds   []string   `protobuf:"bytes,4,rep,name=job_set_ids,json=jobSetIds,proto3" json:"jobSetIds,omitempty"`
	Take        uint32     `protobuf:"varint,5,opt,name=take,proto3" json:"take,omitempty"`
	Skip        uint32     `protobuf:"varint,6,opt,name=skip,proto3" json:"skip,omitempty"`
}

func (m *GetJobsInQueueRequest) Reset()      { *m = GetJobsInQueueRequest{} }
func (*GetJobsInQueueRequest) ProtoMessage() {}
func (*GetJobsInQueueRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ee7620a6fb9cfb1, []int{4}
}
func (m *GetJobsInQueueRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetJobsInQueueRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetJobsInQueueRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetJobsInQueueRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetJobsInQueueRequest.Merge(m, src)
}
func (m *GetJobsInQueueRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetJobsInQueueRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetJobsInQueueRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetJobsInQueueRequest proto.InternalMessageInfo

func (m *GetJobsInQueueRequest) GetQueue() string {
	if m != nil {
		return m.Queue
	}
	return ""
}

func (m *GetJobsInQueueRequest) GetNewestFirst() bool {
	if m != nil {
		return m.NewestFirst
	}
	return false
}

func (m *GetJobsInQueueRequest) GetJobStates() []JobState {
	if m != nil {
		return m.JobStates
	}
	return nil
}

func (m *GetJobsInQueueRequest) GetJobSetIds() []string {
	if m != nil {
		return m.JobSetIds
	}
	return nil
}

func (m *GetJobsInQueueRequest) GetTake() uint32 {
	if m != nil {
		return m.Take
	}
	return 0
}

func (m *GetJobsInQueueRequest) GetSkip() uint32 {
	if m != nil {
		return m.Skip
	}
	return 0
}

type GetJobsInQueueResponse struct {
	JobInfos []*JobInfo `protobuf:"bytes,1,rep,name=job_infos,json=jobInfos,proto3" json:"jobInfos,omitempty"`
}

func (m *GetJobsInQueueResponse) Reset()      { *m = GetJobsInQueueResponse{} }
func (*GetJobsInQueueResponse) ProtoMessage() {}
func (*GetJobsInQueueResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ee7620a6fb9cfb1, []int{5}
}
func (m *GetJobsInQueueResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetJobsInQueueResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetJobsInQueueResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetJobsInQueueResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetJobsInQueueResponse.Merge(m, src)
}
func (m *GetJobsInQueueResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetJobsInQueueResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetJobsInQueueResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetJobsInQueueResponse proto.InternalMessageInfo

func (m *GetJobsInQueueResponse) GetJobInfos() []*JobInfo {
	if m != nil {
		return m.JobInfos
	}
	return nil
}

func init() {
	proto.RegisterEnum("lookout.JobState", JobState_name, JobState_value)
	proto.RegisterType((*SystemOverview)(nil), "lookout.SystemOverview")
	proto.RegisterType((*JobInfo)(nil), "lookout.JobInfo")
	proto.RegisterType((*RunInfo)(nil), "lookout.RunInfo")
	proto.RegisterType((*QueueInfo)(nil), "lookout.QueueInfo")
	proto.RegisterType((*GetJobsInQueueRequest)(nil), "lookout.GetJobsInQueueRequest")
	proto.RegisterType((*GetJobsInQueueResponse)(nil), "lookout.GetJobsInQueueResponse")
}

func init() { proto.RegisterFile("pkg/api/lookout/lookout.proto", fileDescriptor_6ee7620a6fb9cfb1) }

var fileDescriptor_6ee7620a6fb9cfb1 = []byte{
	// 865 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0x4b, 0x6f, 0xdb, 0x46,
	0x10, 0x16, 0xf5, 0xe6, 0x28, 0x72, 0xe5, 0xcd, 0xa3, 0xac, 0x9a, 0x52, 0x0a, 0xd1, 0x83, 0x61,
	0x20, 0x54, 0xeb, 0x5e, 0x82, 0x22, 0x28, 0x12, 0x5b, 0x8c, 0x21, 0xc1, 0x50, 0x13, 0xba, 0xbe,
	0x14, 0x28, 0x04, 0x52, 0x5c, 0x29, 0xb4, 0xa4, 0x5d, 0x86, 0xbb, 0x74, 0x90, 0x5b, 0xd1, 0x53,
	0x8f, 0x01, 0xfa, 0x83, 0x7a, 0xe9, 0x21, 0xe8, 0x29, 0x40, 0x2f, 0x39, 0x14, 0x7d, 0xd8, 0xfd,
	0x21, 0xc5, 0x0e, 0x1f, 0x4e, 0x9c, 0xf8, 0xe0, 0x93, 0x76, 0xbe, 0x99, 0x6f, 0x1e, 0x9f, 0x86,
	0x03, 0x9f, 0x45, 0xcb, 0xc5, 0xc0, 0x8b, 0xc2, 0xc1, 0x8a, 0xf3, 0x25, 0x4f, 0x64, 0xfe, 0x6b,
	0x47, 0x31, 0x97, 0x9c, 0x34, 0x32, 0xb3, 0xdb, 0x5b, 0x70, 0xbe, 0x58, 0xd1, 0x01, 0xc2, 0x7e,
	0x32, 0x1f, 0xc8, 0x70, 0x4d, 0x85, 0xf4, 0xd6, 0x51, 0x1a, 0xd9, 0xfd, 0xf4, 0x62, 0x00, 0x5d,
	0x47, 0xf2, 0x45, 0xe6, 0xbc, 0x9d, 0x39, 0x55, 0x21, 0x8f, 0x31, 0x2e, 0x3d, 0x19, 0x72, 0x26,
	0x32, 0xef, 0xdd, 0x45, 0x28, 0x9f, 0x26, 0xbe, 0x3d, 0xe3, 0xeb, 0xc1, 0x82, 0x2f, 0xf8, 0x79,
	0x0e, 0x65, 0xa1, 0x81, 0xaf, 0x2c, 0xfc, 0x7a, 0xde, 0xf2, 0xb3, 0x84, 0x26, 0x34, 0x05, 0xad,
	0xfb, 0xb0, 0x71, 0xf8, 0x42, 0x48, 0xba, 0xfe, 0xf6, 0x84, 0xc6, 0x27, 0x21, 0x7d, 0x4e, 0xb6,
	0xa1, 0x8e, 0x01, 0xc2, 0xd0, 0xfa, 0x95, 0xad, 0xd6, 0x0e, 0xb1, 0xf3, 0xd1, 0x9e, 0x28, 0x78,
	0xc4, 0xe6, 0xdc, 0xcd, 0x22, 0xac, 0x5f, 0x35, 0x68, 0x8c, 0xb9, 0xaf, 0x30, 0xd2, 0x85, 0xca,
	0x31, 0xf7, 0x0d, 0xad, 0xaf, 0x6d, 0xb5, 0x76, 0x9a, 0xb6, 0x17, 0x85, 0xf6, 0x98, 0xfb, 0xae,
	0x02, 0xc9, 0xe7, 0x50, 0x8d, 0x13, 0x26, 0x8c, 0x32, 0x66, 0xec, 0x14, 0x19, 0xdd, 0x84, 0x61,
	0x3e, 0xf4, 0x92, 0x5d, 0xd0, 0x67, 0x1e, 0x9b, 0xd1, 0xd5, 0x8a, 0x06, 0x46, 0x05, 0xf3, 0x74,
	0xed, 0x54, 0x01, 0x3b, 0x1f, 0xcd, 0xfe, 0x2e, 0xd7, 0x6f, 0xb7, 0xf9, 0xea, 0xaf, 0x9e, 0xf6,
	0xf2, 0xef, 0x9e, 0xe6, 0x9e, 0xd3, 0x88, 0x0d, 0xfa, 0x31, 0xf7, 0xa7, 0x42, 0x7a, 0x92, 0x1a,
	0xd5, 0xbe, 0xb6, 0xb5, 0xb1, 0xb3, 0x59, 0x94, 0x1b, 0x73, 0xff, 0x50, 0x39, 0xdc, 0xe6, 0x71,
	0xf6, 0xb2, 0x7e, 0x2b, 0x43, 0x23, 0xeb, 0x82, 0xdc, 0x84, 0xfa, 0xf2, 0x9e, 0x98, 0x86, 0x01,
	0x0e, 0xa1, 0xbb, 0xb5, 0xe5, 0x3d, 0x31, 0x0a, 0x88, 0x01, 0x8d, 0xd9, 0x2a, 0x11, 0x92, 0xc6,
	0x46, 0x19, 0xf1, 0xdc, 0x24, 0x04, 0xaa, 0x8c, 0x07, 0x14, 0x7b, 0xd5, 0x5d, 0x7c, 0x93, 0xdb,
	0xa0, 0x8b, 0x64, 0x36, 0xa3, 0x34, 0xa0, 0x01, 0x36, 0xd0, 0x74, 0xcf, 0x01, 0x72, 0x03, 0x6a,
	0x34, 0x8e, 0x79, 0x6c, 0xd4, 0xd2, 0x0a, 0x68, 0x90, 0x6f, 0xa0, 0x31, 0x8b, 0xa9, 0x27, 0x69,
	0x60, 0xd4, 0xaf, 0x30, 0x76, 0x4e, 0x52, 0x7c, 0x21, 0xbd, 0x58, 0xf1, 0x1b, 0x57, 0xe1, 0x67,
	0x24, 0xf2, 0x00, 0x9a, 0xf3, 0x90, 0x85, 0xe2, 0x29, 0x0d, 0x8c, 0xe6, 0x15, 0x12, 0x14, 0x2c,
	0xeb, 0xe7, 0x32, 0xe8, 0xc5, 0x7a, 0xa8, 0x29, 0x71, 0x41, 0x72, 0x1d, 0xd1, 0x20, 0x3d, 0x68,
	0x1d, 0x73, 0x5f, 0x4c, 0xd1, 0x0a, 0x50, 0xcb, 0xb6, 0x0b, 0x0a, 0x42, 0x66, 0x40, 0xee, 0xc0,
	0x35, 0x0c, 0x88, 0x28, 0x0b, 0x42, 0xb6, 0x40, 0x59, 0xdb, 0x2e, 0x92, 0x1e, 0xa7, 0x50, 0x11,
	0x12, 0x27, 0x8c, 0xa9, 0x90, 0xea, 0x79, 0x88, 0x9b, 0x42, 0xe4, 0x3e, 0x6c, 0xf2, 0x55, 0x40,
	0x85, 0xcc, 0x0a, 0x4d, 0xd5, 0x56, 0xd6, 0x70, 0xaa, 0xce, 0xdb, 0x9b, 0x80, 0x8b, 0xf7, 0x51,
	0x1a, 0x9a, 0x36, 0x30, 0xe6, 0x3e, 0x79, 0x00, 0xd7, 0x57, 0x9c, 0x2d, 0x14, 0x3d, 0xab, 0x81,
	0xfc, 0xfa, 0x25, 0xfc, 0xcd, 0x2c, 0x38, 0x2b, 0x3e, 0xe6, 0xbe, 0xf5, 0xbb, 0x06, 0x37, 0xf7,
	0xa9, 0x1c, 0x73, 0x5f, 0x8c, 0x18, 0x26, 0x76, 0xe9, 0xb3, 0x84, 0x0a, 0x79, 0x89, 0x2c, 0x77,
	0xe0, 0x1a, 0xa3, 0xcf, 0x55, 0xc1, 0x79, 0x18, 0x0b, 0x89, 0xba, 0x34, 0xdd, 0x56, 0x8a, 0x3d,
	0x52, 0x10, 0xf9, 0x02, 0xa0, 0x58, 0x6a, 0x61, 0x54, 0xfa, 0x95, 0x0f, 0x6f, 0xb5, 0x9e, 0x6f,
	0xb5, 0x20, 0x26, 0x6a, 0x3d, 0x15, 0x54, 0x4e, 0xc3, 0x40, 0x18, 0xd5, 0x7e, 0x65, 0x4b, 0x4f,
	0xfd, 0x54, 0x8e, 0x02, 0xa1, 0x36, 0x57, 0x7a, 0x4b, 0x8a, 0xba, 0xb4, 0x5d, 0x7c, 0x2b, 0x4c,
	0x2c, 0xc3, 0x08, 0x67, 0x6d, 0xbb, 0xf8, 0xb6, 0xf6, 0xe1, 0xd6, 0xc5, 0x59, 0x44, 0xc4, 0x99,
	0xa0, 0xe4, 0x6e, 0xfa, 0xa1, 0x85, 0x6c, 0xce, 0xf3, 0x4b, 0xf1, 0xbe, 0x3c, 0xea, 0x3b, 0x53,
	0x0f, 0xb1, 0xfd, 0x3d, 0x34, 0xf3, 0x3e, 0x09, 0x40, 0xfd, 0xc9, 0x91, 0x73, 0xe4, 0x0c, 0x3b,
	0x25, 0xd2, 0x82, 0xc6, 0x63, 0x67, 0x32, 0x1c, 0x4d, 0xf6, 0x3b, 0x9a, 0x32, 0xdc, 0xa3, 0xc9,
	0x44, 0x19, 0x65, 0xd2, 0x06, 0xfd, 0xf0, 0x68, 0x6f, 0xcf, 0x71, 0x86, 0xce, 0xb0, 0x53, 0x51,
	0xa4, 0x47, 0x0f, 0x47, 0x07, 0xce, 0xb0, 0x53, 0x55, 0xae, 0xbd, 0x87, 0x93, 0x3d, 0xe7, 0x40,
	0x99, 0xb5, 0x9d, 0x3f, 0x35, 0x68, 0x1c, 0xa4, 0x95, 0xc9, 0x0f, 0xd0, 0x2c, 0x2e, 0xd9, 0xad,
	0xf7, 0x96, 0xd8, 0x51, 0xb7, 0xb5, 0xfb, 0x71, 0xd1, 0xe7, 0xbb, 0xa7, 0xcf, 0xea, 0xff, 0xf4,
	0xc7, 0x7f, 0xbf, 0x94, 0xbb, 0xc4, 0xc0, 0x33, 0x79, 0xf2, 0x65, 0x71, 0xdc, 0x79, 0x9e, 0x32,
	0x86, 0x8d, 0x77, 0xf5, 0x20, 0x66, 0x91, 0xec, 0x83, 0x7f, 0x7a, 0xb7, 0x77, 0xa9, 0x3f, 0x15,
	0xd2, 0xea, 0x61, 0xd1, 0x4f, 0xac, 0x1b, 0x17, 0x8b, 0xaa, 0xa5, 0xfe, 0x5a, 0xdb, 0xde, 0xed,
	0xbf, 0xf9, 0xd7, 0x2c, 0xfd, 0x78, 0x6a, 0x6a, 0xaf, 0x4e, 0x4d, 0xed, 0xf5, 0xa9, 0xa9, 0xfd,
	0x73, 0x6a, 0x6a, 0x2f, 0xcf, 0xcc, 0xd2, 0xeb, 0x33, 0xb3, 0xf4, 0xe6, 0xcc, 0x2c, 0xf9, 0x75,
	0x1c, 0xf0, 0xab, 0xff, 0x03, 0x00, 0x00, 0xff, 0xff, 0x2d, 0xa1, 0x99, 0xcc, 0x95, 0x06, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// LookoutClient is the client API for Lookout service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LookoutClient interface {
	Overview(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*SystemOverview, error)
	GetJobsInQueue(ctx context.Context, in *GetJobsInQueueRequest, opts ...grpc.CallOption) (*GetJobsInQueueResponse, error)
}

type lookoutClient struct {
	cc *grpc.ClientConn
}

func NewLookoutClient(cc *grpc.ClientConn) LookoutClient {
	return &lookoutClient{cc}
}

func (c *lookoutClient) Overview(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*SystemOverview, error) {
	out := new(SystemOverview)
	err := c.cc.Invoke(ctx, "/lookout.Lookout/Overview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lookoutClient) GetJobsInQueue(ctx context.Context, in *GetJobsInQueueRequest, opts ...grpc.CallOption) (*GetJobsInQueueResponse, error) {
	out := new(GetJobsInQueueResponse)
	err := c.cc.Invoke(ctx, "/lookout.Lookout/GetJobsInQueue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LookoutServer is the server API for Lookout service.
type LookoutServer interface {
	Overview(context.Context, *types.Empty) (*SystemOverview, error)
	GetJobsInQueue(context.Context, *GetJobsInQueueRequest) (*GetJobsInQueueResponse, error)
}

// UnimplementedLookoutServer can be embedded to have forward compatible implementations.
type UnimplementedLookoutServer struct {
}

func (*UnimplementedLookoutServer) Overview(ctx context.Context, req *types.Empty) (*SystemOverview, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Overview not implemented")
}
func (*UnimplementedLookoutServer) GetJobsInQueue(ctx context.Context, req *GetJobsInQueueRequest) (*GetJobsInQueueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJobsInQueue not implemented")
}

func RegisterLookoutServer(s *grpc.Server, srv LookoutServer) {
	s.RegisterService(&_Lookout_serviceDesc, srv)
}

func _Lookout_Overview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LookoutServer).Overview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lookout.Lookout/Overview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LookoutServer).Overview(ctx, req.(*types.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lookout_GetJobsInQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJobsInQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LookoutServer).GetJobsInQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lookout.Lookout/GetJobsInQueue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LookoutServer).GetJobsInQueue(ctx, req.(*GetJobsInQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Lookout_serviceDesc = grpc.ServiceDesc{
	ServiceName: "lookout.Lookout",
	HandlerType: (*LookoutServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Overview",
			Handler:    _Lookout_Overview_Handler,
		},
		{
			MethodName: "GetJobsInQueue",
			Handler:    _Lookout_GetJobsInQueue_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/api/lookout/lookout.proto",
}

func (m *SystemOverview) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SystemOverview) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SystemOverview) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Queues) > 0 {
		for iNdEx := len(m.Queues) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Queues[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLookout(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *JobInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JobInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JobInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.JobState != 0 {
		i = encodeVarintLookout(dAtA, i, uint64(m.JobState))
		i--
		dAtA[i] = 0x20
	}
	if m.Cancelled != nil {
		n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.Cancelled, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.Cancelled):])
		if err1 != nil {
			return 0, err1
		}
		i -= n1
		i = encodeVarintLookout(dAtA, i, uint64(n1))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Runs) > 0 {
		for iNdEx := len(m.Runs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Runs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLookout(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Job != nil {
		{
			size, err := m.Job.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLookout(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RunInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RunInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RunInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Finished != nil {
		n3, err3 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.Finished, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.Finished):])
		if err3 != nil {
			return 0, err3
		}
		i -= n3
		i = encodeVarintLookout(dAtA, i, uint64(n3))
		i--
		dAtA[i] = 0x42
	}
	if m.Started != nil {
		n4, err4 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.Started, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.Started):])
		if err4 != nil {
			return 0, err4
		}
		i -= n4
		i = encodeVarintLookout(dAtA, i, uint64(n4))
		i--
		dAtA[i] = 0x3a
	}
	if m.Created != nil {
		n5, err5 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.Created, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.Created):])
		if err5 != nil {
			return 0, err5
		}
		i -= n5
		i = encodeVarintLookout(dAtA, i, uint64(n5))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Error) > 0 {
		i -= len(m.Error)
		copy(dAtA[i:], m.Error)
		i = encodeVarintLookout(dAtA, i, uint64(len(m.Error)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Succeeded {
		i--
		if m.Succeeded {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.Node) > 0 {
		i -= len(m.Node)
		copy(dAtA[i:], m.Node)
		i = encodeVarintLookout(dAtA, i, uint64(len(m.Node)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Cluster) > 0 {
		i -= len(m.Cluster)
		copy(dAtA[i:], m.Cluster)
		i = encodeVarintLookout(dAtA, i, uint64(len(m.Cluster)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.K8SId) > 0 {
		i -= len(m.K8SId)
		copy(dAtA[i:], m.K8SId)
		i = encodeVarintLookout(dAtA, i, uint64(len(m.K8SId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueueInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueueInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueueInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LongestRunningJob != nil {
		{
			size, err := m.LongestRunningJob.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLookout(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.OldestQueuedJob != nil {
		{
			size, err := m.OldestQueuedJob.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLookout(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.JobsRunning != 0 {
		i = encodeVarintLookout(dAtA, i, uint64(m.JobsRunning))
		i--
		dAtA[i] = 0x20
	}
	if m.JobsPending != 0 {
		i = encodeVarintLookout(dAtA, i, uint64(m.JobsPending))
		i--
		dAtA[i] = 0x18
	}
	if m.JobsQueued != 0 {
		i = encodeVarintLookout(dAtA, i, uint64(m.JobsQueued))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Queue) > 0 {
		i -= len(m.Queue)
		copy(dAtA[i:], m.Queue)
		i = encodeVarintLookout(dAtA, i, uint64(len(m.Queue)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetJobsInQueueRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetJobsInQueueRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetJobsInQueueRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Skip != 0 {
		i = encodeVarintLookout(dAtA, i, uint64(m.Skip))
		i--
		dAtA[i] = 0x30
	}
	if m.Take != 0 {
		i = encodeVarintLookout(dAtA, i, uint64(m.Take))
		i--
		dAtA[i] = 0x28
	}
	if len(m.JobSetIds) > 0 {
		for iNdEx := len(m.JobSetIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.JobSetIds[iNdEx])
			copy(dAtA[i:], m.JobSetIds[iNdEx])
			i = encodeVarintLookout(dAtA, i, uint64(len(m.JobSetIds[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.JobStates) > 0 {
		dAtA9 := make([]byte, len(m.JobStates)*10)
		var j8 int
		for _, num := range m.JobStates {
			for num >= 1<<7 {
				dAtA9[j8] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j8++
			}
			dAtA9[j8] = uint8(num)
			j8++
		}
		i -= j8
		copy(dAtA[i:], dAtA9[:j8])
		i = encodeVarintLookout(dAtA, i, uint64(j8))
		i--
		dAtA[i] = 0x1a
	}
	if m.NewestFirst {
		i--
		if m.NewestFirst {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Queue) > 0 {
		i -= len(m.Queue)
		copy(dAtA[i:], m.Queue)
		i = encodeVarintLookout(dAtA, i, uint64(len(m.Queue)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetJobsInQueueResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetJobsInQueueResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetJobsInQueueResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.JobInfos) > 0 {
		for iNdEx := len(m.JobInfos) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.JobInfos[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLookout(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintLookout(dAtA []byte, offset int, v uint64) int {
	offset -= sovLookout(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SystemOverview) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Queues) > 0 {
		for _, e := range m.Queues {
			l = e.Size()
			n += 1 + l + sovLookout(uint64(l))
		}
	}
	return n
}

func (m *JobInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Job != nil {
		l = m.Job.Size()
		n += 1 + l + sovLookout(uint64(l))
	}
	if len(m.Runs) > 0 {
		for _, e := range m.Runs {
			l = e.Size()
			n += 1 + l + sovLookout(uint64(l))
		}
	}
	if m.Cancelled != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.Cancelled)
		n += 1 + l + sovLookout(uint64(l))
	}
	if m.JobState != 0 {
		n += 1 + sovLookout(uint64(m.JobState))
	}
	return n
}

func (m *RunInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.K8SId)
	if l > 0 {
		n += 1 + l + sovLookout(uint64(l))
	}
	l = len(m.Cluster)
	if l > 0 {
		n += 1 + l + sovLookout(uint64(l))
	}
	l = len(m.Node)
	if l > 0 {
		n += 1 + l + sovLookout(uint64(l))
	}
	if m.Succeeded {
		n += 2
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovLookout(uint64(l))
	}
	if m.Created != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.Created)
		n += 1 + l + sovLookout(uint64(l))
	}
	if m.Started != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.Started)
		n += 1 + l + sovLookout(uint64(l))
	}
	if m.Finished != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.Finished)
		n += 1 + l + sovLookout(uint64(l))
	}
	return n
}

func (m *QueueInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Queue)
	if l > 0 {
		n += 1 + l + sovLookout(uint64(l))
	}
	if m.JobsQueued != 0 {
		n += 1 + sovLookout(uint64(m.JobsQueued))
	}
	if m.JobsPending != 0 {
		n += 1 + sovLookout(uint64(m.JobsPending))
	}
	if m.JobsRunning != 0 {
		n += 1 + sovLookout(uint64(m.JobsRunning))
	}
	if m.OldestQueuedJob != nil {
		l = m.OldestQueuedJob.Size()
		n += 1 + l + sovLookout(uint64(l))
	}
	if m.LongestRunningJob != nil {
		l = m.LongestRunningJob.Size()
		n += 1 + l + sovLookout(uint64(l))
	}
	return n
}

func (m *GetJobsInQueueRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Queue)
	if l > 0 {
		n += 1 + l + sovLookout(uint64(l))
	}
	if m.NewestFirst {
		n += 2
	}
	if len(m.JobStates) > 0 {
		l = 0
		for _, e := range m.JobStates {
			l += sovLookout(uint64(e))
		}
		n += 1 + sovLookout(uint64(l)) + l
	}
	if len(m.JobSetIds) > 0 {
		for _, s := range m.JobSetIds {
			l = len(s)
			n += 1 + l + sovLookout(uint64(l))
		}
	}
	if m.Take != 0 {
		n += 1 + sovLookout(uint64(m.Take))
	}
	if m.Skip != 0 {
		n += 1 + sovLookout(uint64(m.Skip))
	}
	return n
}

func (m *GetJobsInQueueResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.JobInfos) > 0 {
		for _, e := range m.JobInfos {
			l = e.Size()
			n += 1 + l + sovLookout(uint64(l))
		}
	}
	return n
}

func sovLookout(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLookout(x uint64) (n int) {
	return sovLookout(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *SystemOverview) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForQueues := "[]*QueueInfo{"
	for _, f := range this.Queues {
		repeatedStringForQueues += strings.Replace(f.String(), "QueueInfo", "QueueInfo", 1) + ","
	}
	repeatedStringForQueues += "}"
	s := strings.Join([]string{`&SystemOverview{`,
		`Queues:` + repeatedStringForQueues + `,`,
		`}`,
	}, "")
	return s
}
func (this *JobInfo) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForRuns := "[]*RunInfo{"
	for _, f := range this.Runs {
		repeatedStringForRuns += strings.Replace(f.String(), "RunInfo", "RunInfo", 1) + ","
	}
	repeatedStringForRuns += "}"
	s := strings.Join([]string{`&JobInfo{`,
		`Job:` + strings.Replace(fmt.Sprintf("%v", this.Job), "Job", "api.Job", 1) + `,`,
		`Runs:` + repeatedStringForRuns + `,`,
		`Cancelled:` + strings.Replace(fmt.Sprintf("%v", this.Cancelled), "Timestamp", "types.Timestamp", 1) + `,`,
		`JobState:` + fmt.Sprintf("%v", this.JobState) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RunInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RunInfo{`,
		`K8SId:` + fmt.Sprintf("%v", this.K8SId) + `,`,
		`Cluster:` + fmt.Sprintf("%v", this.Cluster) + `,`,
		`Node:` + fmt.Sprintf("%v", this.Node) + `,`,
		`Succeeded:` + fmt.Sprintf("%v", this.Succeeded) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`Created:` + strings.Replace(fmt.Sprintf("%v", this.Created), "Timestamp", "types.Timestamp", 1) + `,`,
		`Started:` + strings.Replace(fmt.Sprintf("%v", this.Started), "Timestamp", "types.Timestamp", 1) + `,`,
		`Finished:` + strings.Replace(fmt.Sprintf("%v", this.Finished), "Timestamp", "types.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *QueueInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&QueueInfo{`,
		`Queue:` + fmt.Sprintf("%v", this.Queue) + `,`,
		`JobsQueued:` + fmt.Sprintf("%v", this.JobsQueued) + `,`,
		`JobsPending:` + fmt.Sprintf("%v", this.JobsPending) + `,`,
		`JobsRunning:` + fmt.Sprintf("%v", this.JobsRunning) + `,`,
		`OldestQueuedJob:` + strings.Replace(this.OldestQueuedJob.String(), "JobInfo", "JobInfo", 1) + `,`,
		`LongestRunningJob:` + strings.Replace(this.LongestRunningJob.String(), "JobInfo", "JobInfo", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetJobsInQueueRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetJobsInQueueRequest{`,
		`Queue:` + fmt.Sprintf("%v", this.Queue) + `,`,
		`NewestFirst:` + fmt.Sprintf("%v", this.NewestFirst) + `,`,
		`JobStates:` + fmt.Sprintf("%v", this.JobStates) + `,`,
		`JobSetIds:` + fmt.Sprintf("%v", this.JobSetIds) + `,`,
		`Take:` + fmt.Sprintf("%v", this.Take) + `,`,
		`Skip:` + fmt.Sprintf("%v", this.Skip) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetJobsInQueueResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForJobInfos := "[]*JobInfo{"
	for _, f := range this.JobInfos {
		repeatedStringForJobInfos += strings.Replace(f.String(), "JobInfo", "JobInfo", 1) + ","
	}
	repeatedStringForJobInfos += "}"
	s := strings.Join([]string{`&GetJobsInQueueResponse{`,
		`JobInfos:` + repeatedStringForJobInfos + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringLookout(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *SystemOverview) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLookout
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SystemOverview: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SystemOverview: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Queues", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLookout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLookout
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLookout
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Queues = append(m.Queues, &QueueInfo{})
			if err := m.Queues[len(m.Queues)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLookout(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLookout
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLookout
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JobInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLookout
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JobInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JobInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Job", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLookout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLookout
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLookout
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Job == nil {
				m.Job = &api.Job{}
			}
			if err := m.Job.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Runs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLookout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLookout
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLookout
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Runs = append(m.Runs, &RunInfo{})
			if err := m.Runs[len(m.Runs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cancelled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLookout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLookout
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLookout
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Cancelled == nil {
				m.Cancelled = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.Cancelled, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobState", wireType)
			}
			m.JobState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLookout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.JobState |= JobState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLookout(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLookout
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLookout
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RunInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLookout
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RunInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RunInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field K8SId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLookout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLookout
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLookout
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.K8SId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cluster", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLookout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLookout
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLookout
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cluster = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Node", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLookout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLookout
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLookout
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Node = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Succeeded", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLookout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Succeeded = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLookout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLookout
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLookout
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Created", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLookout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLookout
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLookout
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Created == nil {
				m.Created = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.Created, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Started", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLookout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLookout
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLookout
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Started == nil {
				m.Started = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.Started, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Finished", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLookout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLookout
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLookout
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Finished == nil {
				m.Finished = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.Finished, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLookout(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLookout
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLookout
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueueInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLookout
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueueInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueueInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Queue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLookout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLookout
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLookout
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Queue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobsQueued", wireType)
			}
			m.JobsQueued = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLookout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.JobsQueued |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobsPending", wireType)
			}
			m.JobsPending = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLookout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.JobsPending |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobsRunning", wireType)
			}
			m.JobsRunning = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLookout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.JobsRunning |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OldestQueuedJob", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLookout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLookout
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLookout
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OldestQueuedJob == nil {
				m.OldestQueuedJob = &JobInfo{}
			}
			if err := m.OldestQueuedJob.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LongestRunningJob", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLookout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLookout
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLookout
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LongestRunningJob == nil {
				m.LongestRunningJob = &JobInfo{}
			}
			if err := m.LongestRunningJob.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLookout(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLookout
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLookout
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetJobsInQueueRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLookout
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetJobsInQueueRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetJobsInQueueRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Queue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLookout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLookout
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLookout
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Queue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewestFirst", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLookout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NewestFirst = bool(v != 0)
		case 3:
			if wireType == 0 {
				var v JobState
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLookout
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= JobState(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.JobStates = append(m.JobStates, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLookout
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthLookout
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthLookout
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.JobStates) == 0 {
					m.JobStates = make([]JobState, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v JobState
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLookout
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= JobState(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.JobStates = append(m.JobStates, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field JobStates", wireType)
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobSetIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLookout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLookout
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLookout
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobSetIds = append(m.JobSetIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Take", wireType)
			}
			m.Take = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLookout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Take |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Skip", wireType)
			}
			m.Skip = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLookout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Skip |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLookout(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLookout
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLookout
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetJobsInQueueResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLookout
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetJobsInQueueResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetJobsInQueueResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLookout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLookout
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLookout
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobInfos = append(m.JobInfos, &JobInfo{})
			if err := m.JobInfos[len(m.JobInfos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLookout(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLookout
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLookout
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLookout(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLookout
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLookout
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLookout
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLookout
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLookout
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLookout
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLookout        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLookout          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLookout = fmt.Errorf("proto: unexpected end of group")
)
