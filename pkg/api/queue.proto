syntax = 'proto3';

package api;

import "google/protobuf/timestamp.proto";
import "k8s.io/api/core/v1/generated.proto";
import "k8s.io/apimachinery/pkg/api/resource/generated.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "google/protobuf/empty.proto";

option (gogoproto.goproto_stringer_all) = false;
option (gogoproto.stringer_all) = true;

message Job {
    string Id = 1;
    string JobSetId = 2;
    string Queue = 3;
    string Namespace = 7;
    map<string, string> Labels = 9;
    map<string, string> Annotations = 10;
    map<string, string> RequiredNodeLabels = 11 [deprecated = true];
    string Owner = 8;
    double Priority = 4;
    k8s.io.api.core.v1.PodSpec PodSpec = 5;
    google.protobuf.Timestamp Created = 6 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];
}

message LeaseRequest {
    string ClusterId = 1;
    map<string, k8s.io.apimachinery.pkg.api.resource.Quantity> Resources = 2 [(gogoproto.nullable) = false];
    ClusterLeasedReport ClusterLeasedReport  = 4 [(gogoproto.nullable) = false];
    map<string, k8s.io.apimachinery.pkg.api.resource.Quantity> MinimumJobSize = 6 [(gogoproto.nullable) = false];
    repeated NodeInfo Nodes = 7 [(gogoproto.nullable) = false];
}

message NodeInfo {
    string name = 1;
    repeated k8s.io.api.core.v1.Taint Taints = 2 [(gogoproto.nullable) = false];
    map<string,string> Labels = 3;
    map<string, k8s.io.apimachinery.pkg.api.resource.Quantity> AllocatableResources = 4 [(gogoproto.nullable) = false];
    map<string, k8s.io.apimachinery.pkg.api.resource.Quantity> AvailableResources = 5 [(gogoproto.nullable) = false];
}

// Used to store last info in Redis
message ClusterSchedulingInfoReport {
    string ClusterId = 1;
    google.protobuf.Timestamp ReportTime = 2 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];
    repeated NodeLabeling AvailableLabels = 3;
    repeated ComputeResource NodeSizes = 4 [(gogoproto.nullable) = false];
    map<string, k8s.io.apimachinery.pkg.api.resource.Quantity> MinimumJobSize = 6 [(gogoproto.nullable) = false];
}

message QueueLeasedReport {
    string Name = 1;
    map<string, k8s.io.apimachinery.pkg.api.resource.Quantity> ResourcesLeased = 2 [(gogoproto.nullable) = false];
}

message ClusterLeasedReport {
    string ClusterId = 1;
    google.protobuf.Timestamp ReportTime = 2 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];
    repeated QueueLeasedReport Queues = 3;
}

message ComputeResource {
    map<string, k8s.io.apimachinery.pkg.api.resource.Quantity> Resources = 1 [(gogoproto.nullable) = false];
}

message NodeLabeling {
    map<string,string> Labels = 3;
}

message JobLease {
    repeated Job Job = 1;
}

message IdList {
    repeated string Ids = 1;
}

message RenewLeaseRequest {
    string ClusterId = 1;
    repeated string Ids = 2;
}

message ReturnLeaseRequest {
    string ClusterId = 1;
    string JobId = 2;
}

service AggregatedQueue {
    rpc LeaseJobs (LeaseRequest) returns (JobLease);
    rpc RenewLease (RenewLeaseRequest) returns (IdList);
    rpc ReturnLease (ReturnLeaseRequest) returns (google.protobuf.Empty);
    rpc ReportDone (IdList) returns (IdList);
}
