// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pkg/api/submit.proto

package api

import (
	context "context"
	encoding_binary "encoding/binary"
	fmt "fmt"
	io "io"
	math "math"
	reflect "reflect"
	strings "strings"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	types "github.com/gogo/protobuf/types"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	v1 "k8s.io/api/core/v1"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type JobSubmitRequestItem struct {
	Priority           float64           `protobuf:"fixed64,1,opt,name=Priority,proto3" json:"Priority,omitempty"`
	Namespace          string            `protobuf:"bytes,3,opt,name=Namespace,proto3" json:"Namespace,omitempty"`
	Labels             map[string]string `protobuf:"bytes,4,rep,name=Labels,proto3" json:"Labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Annotations        map[string]string `protobuf:"bytes,5,rep,name=Annotations,proto3" json:"Annotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	RequiredNodeLabels map[string]string `protobuf:"bytes,6,rep,name=RequiredNodeLabels,proto3" json:"RequiredNodeLabels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // Deprecated: Do not use.
	PodSpec            *v1.PodSpec       `protobuf:"bytes,2,opt,name=PodSpec,proto3" json:"PodSpec,omitempty"`
}

func (m *JobSubmitRequestItem) Reset()      { *m = JobSubmitRequestItem{} }
func (*JobSubmitRequestItem) ProtoMessage() {}
func (*JobSubmitRequestItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_e998bacb27df16c1, []int{0}
}
func (m *JobSubmitRequestItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JobSubmitRequestItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JobSubmitRequestItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JobSubmitRequestItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobSubmitRequestItem.Merge(m, src)
}
func (m *JobSubmitRequestItem) XXX_Size() int {
	return m.Size()
}
func (m *JobSubmitRequestItem) XXX_DiscardUnknown() {
	xxx_messageInfo_JobSubmitRequestItem.DiscardUnknown(m)
}

var xxx_messageInfo_JobSubmitRequestItem proto.InternalMessageInfo

func (m *JobSubmitRequestItem) GetPriority() float64 {
	if m != nil {
		return m.Priority
	}
	return 0
}

func (m *JobSubmitRequestItem) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *JobSubmitRequestItem) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *JobSubmitRequestItem) GetAnnotations() map[string]string {
	if m != nil {
		return m.Annotations
	}
	return nil
}

// Deprecated: Do not use.
func (m *JobSubmitRequestItem) GetRequiredNodeLabels() map[string]string {
	if m != nil {
		return m.RequiredNodeLabels
	}
	return nil
}

func (m *JobSubmitRequestItem) GetPodSpec() *v1.PodSpec {
	if m != nil {
		return m.PodSpec
	}
	return nil
}

// swagger:model
type JobSubmitRequest struct {
	Queue           string                  `protobuf:"bytes,1,opt,name=Queue,proto3" json:"Queue,omitempty"`
	JobSetId        string                  `protobuf:"bytes,2,opt,name=JobSetId,proto3" json:"JobSetId,omitempty"`
	JobRequestItems []*JobSubmitRequestItem `protobuf:"bytes,3,rep,name=JobRequestItems,proto3" json:"JobRequestItems,omitempty"`
}

func (m *JobSubmitRequest) Reset()      { *m = JobSubmitRequest{} }
func (*JobSubmitRequest) ProtoMessage() {}
func (*JobSubmitRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e998bacb27df16c1, []int{1}
}
func (m *JobSubmitRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JobSubmitRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JobSubmitRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JobSubmitRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobSubmitRequest.Merge(m, src)
}
func (m *JobSubmitRequest) XXX_Size() int {
	return m.Size()
}
func (m *JobSubmitRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_JobSubmitRequest.DiscardUnknown(m)
}

var xxx_messageInfo_JobSubmitRequest proto.InternalMessageInfo

func (m *JobSubmitRequest) GetQueue() string {
	if m != nil {
		return m.Queue
	}
	return ""
}

func (m *JobSubmitRequest) GetJobSetId() string {
	if m != nil {
		return m.JobSetId
	}
	return ""
}

func (m *JobSubmitRequest) GetJobRequestItems() []*JobSubmitRequestItem {
	if m != nil {
		return m.JobRequestItems
	}
	return nil
}

// swagger:model
type JobCancelRequest struct {
	JobId    string `protobuf:"bytes,1,opt,name=JobId,proto3" json:"JobId,omitempty"`
	JobSetId string `protobuf:"bytes,2,opt,name=JobSetId,proto3" json:"JobSetId,omitempty"`
	Queue    string `protobuf:"bytes,3,opt,name=Queue,proto3" json:"Queue,omitempty"`
}

func (m *JobCancelRequest) Reset()      { *m = JobCancelRequest{} }
func (*JobCancelRequest) ProtoMessage() {}
func (*JobCancelRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e998bacb27df16c1, []int{2}
}
func (m *JobCancelRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JobCancelRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JobCancelRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JobCancelRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobCancelRequest.Merge(m, src)
}
func (m *JobCancelRequest) XXX_Size() int {
	return m.Size()
}
func (m *JobCancelRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_JobCancelRequest.DiscardUnknown(m)
}

var xxx_messageInfo_JobCancelRequest proto.InternalMessageInfo

func (m *JobCancelRequest) GetJobId() string {
	if m != nil {
		return m.JobId
	}
	return ""
}

func (m *JobCancelRequest) GetJobSetId() string {
	if m != nil {
		return m.JobSetId
	}
	return ""
}

func (m *JobCancelRequest) GetQueue() string {
	if m != nil {
		return m.Queue
	}
	return ""
}

type JobSubmitResponseItem struct {
	JobId string `protobuf:"bytes,1,opt,name=JobId,proto3" json:"JobId,omitempty"`
	Error string `protobuf:"bytes,2,opt,name=Error,proto3" json:"Error,omitempty"`
}

func (m *JobSubmitResponseItem) Reset()      { *m = JobSubmitResponseItem{} }
func (*JobSubmitResponseItem) ProtoMessage() {}
func (*JobSubmitResponseItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_e998bacb27df16c1, []int{3}
}
func (m *JobSubmitResponseItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JobSubmitResponseItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JobSubmitResponseItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JobSubmitResponseItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobSubmitResponseItem.Merge(m, src)
}
func (m *JobSubmitResponseItem) XXX_Size() int {
	return m.Size()
}
func (m *JobSubmitResponseItem) XXX_DiscardUnknown() {
	xxx_messageInfo_JobSubmitResponseItem.DiscardUnknown(m)
}

var xxx_messageInfo_JobSubmitResponseItem proto.InternalMessageInfo

func (m *JobSubmitResponseItem) GetJobId() string {
	if m != nil {
		return m.JobId
	}
	return ""
}

func (m *JobSubmitResponseItem) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

// swagger:model
type JobSubmitResponse struct {
	JobResponseItems []*JobSubmitResponseItem `protobuf:"bytes,1,rep,name=JobResponseItems,proto3" json:"JobResponseItems,omitempty"`
}

func (m *JobSubmitResponse) Reset()      { *m = JobSubmitResponse{} }
func (*JobSubmitResponse) ProtoMessage() {}
func (*JobSubmitResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e998bacb27df16c1, []int{4}
}
func (m *JobSubmitResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JobSubmitResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JobSubmitResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JobSubmitResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobSubmitResponse.Merge(m, src)
}
func (m *JobSubmitResponse) XXX_Size() int {
	return m.Size()
}
func (m *JobSubmitResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_JobSubmitResponse.DiscardUnknown(m)
}

var xxx_messageInfo_JobSubmitResponse proto.InternalMessageInfo

func (m *JobSubmitResponse) GetJobResponseItems() []*JobSubmitResponseItem {
	if m != nil {
		return m.JobResponseItems
	}
	return nil
}

// swagger:model
type Queue struct {
	Name           string             `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	PriorityFactor float64            `protobuf:"fixed64,2,opt,name=PriorityFactor,proto3" json:"PriorityFactor,omitempty"`
	UserOwners     []string           `protobuf:"bytes,3,rep,name=UserOwners,proto3" json:"UserOwners,omitempty"`
	GroupOwners    []string           `protobuf:"bytes,4,rep,name=GroupOwners,proto3" json:"GroupOwners,omitempty"`
	ResourceLimits map[string]float64 `protobuf:"bytes,5,rep,name=ResourceLimits,proto3" json:"ResourceLimits,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
}

func (m *Queue) Reset()      { *m = Queue{} }
func (*Queue) ProtoMessage() {}
func (*Queue) Descriptor() ([]byte, []int) {
	return fileDescriptor_e998bacb27df16c1, []int{5}
}
func (m *Queue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Queue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Queue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Queue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Queue.Merge(m, src)
}
func (m *Queue) XXX_Size() int {
	return m.Size()
}
func (m *Queue) XXX_DiscardUnknown() {
	xxx_messageInfo_Queue.DiscardUnknown(m)
}

var xxx_messageInfo_Queue proto.InternalMessageInfo

func (m *Queue) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Queue) GetPriorityFactor() float64 {
	if m != nil {
		return m.PriorityFactor
	}
	return 0
}

func (m *Queue) GetUserOwners() []string {
	if m != nil {
		return m.UserOwners
	}
	return nil
}

func (m *Queue) GetGroupOwners() []string {
	if m != nil {
		return m.GroupOwners
	}
	return nil
}

func (m *Queue) GetResourceLimits() map[string]float64 {
	if m != nil {
		return m.ResourceLimits
	}
	return nil
}

// swagger:model
type CancellationResult struct {
	CancelledIds []string `protobuf:"bytes,1,rep,name=CancelledIds,proto3" json:"CancelledIds,omitempty"`
}

func (m *CancellationResult) Reset()      { *m = CancellationResult{} }
func (*CancellationResult) ProtoMessage() {}
func (*CancellationResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_e998bacb27df16c1, []int{6}
}
func (m *CancellationResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CancellationResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CancellationResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CancellationResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CancellationResult.Merge(m, src)
}
func (m *CancellationResult) XXX_Size() int {
	return m.Size()
}
func (m *CancellationResult) XXX_DiscardUnknown() {
	xxx_messageInfo_CancellationResult.DiscardUnknown(m)
}

var xxx_messageInfo_CancellationResult proto.InternalMessageInfo

func (m *CancellationResult) GetCancelledIds() []string {
	if m != nil {
		return m.CancelledIds
	}
	return nil
}

//swagger:model
type QueueInfoRequest struct {
	Name string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
}

func (m *QueueInfoRequest) Reset()      { *m = QueueInfoRequest{} }
func (*QueueInfoRequest) ProtoMessage() {}
func (*QueueInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e998bacb27df16c1, []int{7}
}
func (m *QueueInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueueInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueueInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueueInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueueInfoRequest.Merge(m, src)
}
func (m *QueueInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueueInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueueInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueueInfoRequest proto.InternalMessageInfo

func (m *QueueInfoRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

//swagger:model
type QueueInfo struct {
	Name          string        `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	ActiveJobSets []*JobSetInfo `protobuf:"bytes,2,rep,name=ActiveJobSets,proto3" json:"ActiveJobSets,omitempty"`
}

func (m *QueueInfo) Reset()      { *m = QueueInfo{} }
func (*QueueInfo) ProtoMessage() {}
func (*QueueInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_e998bacb27df16c1, []int{8}
}
func (m *QueueInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueueInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueueInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueueInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueueInfo.Merge(m, src)
}
func (m *QueueInfo) XXX_Size() int {
	return m.Size()
}
func (m *QueueInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_QueueInfo.DiscardUnknown(m)
}

var xxx_messageInfo_QueueInfo proto.InternalMessageInfo

func (m *QueueInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *QueueInfo) GetActiveJobSets() []*JobSetInfo {
	if m != nil {
		return m.ActiveJobSets
	}
	return nil
}

type JobSetInfo struct {
	Name       string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	QueuedJobs int32  `protobuf:"varint,2,opt,name=QueuedJobs,proto3" json:"QueuedJobs,omitempty"`
	LeasedJobs int32  `protobuf:"varint,3,opt,name=LeasedJobs,proto3" json:"LeasedJobs,omitempty"`
}

func (m *JobSetInfo) Reset()      { *m = JobSetInfo{} }
func (*JobSetInfo) ProtoMessage() {}
func (*JobSetInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_e998bacb27df16c1, []int{9}
}
func (m *JobSetInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JobSetInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JobSetInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JobSetInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobSetInfo.Merge(m, src)
}
func (m *JobSetInfo) XXX_Size() int {
	return m.Size()
}
func (m *JobSetInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_JobSetInfo.DiscardUnknown(m)
}

var xxx_messageInfo_JobSetInfo proto.InternalMessageInfo

func (m *JobSetInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *JobSetInfo) GetQueuedJobs() int32 {
	if m != nil {
		return m.QueuedJobs
	}
	return 0
}

func (m *JobSetInfo) GetLeasedJobs() int32 {
	if m != nil {
		return m.LeasedJobs
	}
	return 0
}

func init() {
	proto.RegisterType((*JobSubmitRequestItem)(nil), "api.JobSubmitRequestItem")
	proto.RegisterMapType((map[string]string)(nil), "api.JobSubmitRequestItem.AnnotationsEntry")
	proto.RegisterMapType((map[string]string)(nil), "api.JobSubmitRequestItem.LabelsEntry")
	proto.RegisterMapType((map[string]string)(nil), "api.JobSubmitRequestItem.RequiredNodeLabelsEntry")
	proto.RegisterType((*JobSubmitRequest)(nil), "api.JobSubmitRequest")
	proto.RegisterType((*JobCancelRequest)(nil), "api.JobCancelRequest")
	proto.RegisterType((*JobSubmitResponseItem)(nil), "api.JobSubmitResponseItem")
	proto.RegisterType((*JobSubmitResponse)(nil), "api.JobSubmitResponse")
	proto.RegisterType((*Queue)(nil), "api.Queue")
	proto.RegisterMapType((map[string]float64)(nil), "api.Queue.ResourceLimitsEntry")
	proto.RegisterType((*CancellationResult)(nil), "api.CancellationResult")
	proto.RegisterType((*QueueInfoRequest)(nil), "api.QueueInfoRequest")
	proto.RegisterType((*QueueInfo)(nil), "api.QueueInfo")
	proto.RegisterType((*JobSetInfo)(nil), "api.JobSetInfo")
}

func init() { proto.RegisterFile("pkg/api/submit.proto", fileDescriptor_e998bacb27df16c1) }

var fileDescriptor_e998bacb27df16c1 = []byte{
	// 869 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x55, 0xcf, 0x6b, 0xdc, 0x46,
	0x14, 0xb6, 0x76, 0x6d, 0xb7, 0xfb, 0x36, 0x75, 0xb6, 0x13, 0x3b, 0x51, 0xe4, 0x20, 0x16, 0x41,
	0x83, 0x09, 0x54, 0xc2, 0x2e, 0x01, 0x37, 0xd0, 0x82, 0x63, 0xec, 0xb0, 0xc6, 0x38, 0xa9, 0x42,
	0x53, 0x68, 0x2f, 0xd5, 0x8f, 0x97, 0xad, 0xea, 0x5d, 0x8d, 0xa2, 0x19, 0xb9, 0x98, 0x52, 0x28,
	0xbd, 0xf5, 0x16, 0xe8, 0xdf, 0xd3, 0x7b, 0x8f, 0x81, 0x5e, 0x42, 0x4f, 0xad, 0xdd, 0x3f, 0xa4,
	0xcc, 0x1b, 0xed, 0x4a, 0xbb, 0x2b, 0x37, 0xf8, 0x36, 0xef, 0xcd, 0xf7, 0xbe, 0xf9, 0xde, 0x2f,
	0x06, 0xd6, 0xb3, 0xd3, 0xa1, 0x17, 0x64, 0x89, 0x27, 0x8a, 0x70, 0x9c, 0x48, 0x37, 0xcb, 0xb9,
	0xe4, 0xac, 0x1d, 0x64, 0x89, 0xb5, 0x39, 0xe4, 0x7c, 0x38, 0x42, 0x8f, 0x5c, 0x61, 0xf1, 0xd2,
	0xc3, 0x71, 0x26, 0xcf, 0x35, 0xc2, 0x72, 0x4e, 0x77, 0x85, 0x9b, 0x70, 0x0a, 0x8d, 0x78, 0x8e,
	0xde, 0xd9, 0xb6, 0x37, 0xc4, 0x14, 0xf3, 0x40, 0x62, 0x5c, 0x62, 0xee, 0x95, 0x04, 0x0a, 0x13,
	0xa4, 0x29, 0x97, 0x81, 0x4c, 0x78, 0x2a, 0xca, 0xdb, 0x8f, 0x87, 0x89, 0xfc, 0xae, 0x08, 0xdd,
	0x88, 0x8f, 0xbd, 0x21, 0x1f, 0xf2, 0xea, 0x1d, 0x65, 0x91, 0x41, 0x27, 0x0d, 0x77, 0x7e, 0x5f,
	0x86, 0xf5, 0x23, 0x1e, 0x3e, 0x27, 0x99, 0x3e, 0xbe, 0x2a, 0x50, 0xc8, 0x81, 0xc4, 0x31, 0xb3,
	0xe0, 0xfd, 0x67, 0x79, 0xc2, 0xf3, 0x44, 0x9e, 0x9b, 0x46, 0xdf, 0xd8, 0x32, 0xfc, 0xa9, 0xcd,
	0xee, 0x41, 0xe7, 0x24, 0x18, 0xa3, 0xc8, 0x82, 0x08, 0xcd, 0x76, 0xdf, 0xd8, 0xea, 0xf8, 0x95,
	0x83, 0x7d, 0x06, 0xab, 0xc7, 0x41, 0x88, 0x23, 0x61, 0x2e, 0xf7, 0xdb, 0x5b, 0xdd, 0x9d, 0x8f,
	0xdc, 0x20, 0x4b, 0xdc, 0xa6, 0x47, 0x5c, 0x8d, 0x3b, 0x48, 0x65, 0x7e, 0xee, 0x97, 0x41, 0xec,
	0x18, 0xba, 0x7b, 0x55, 0x56, 0xe6, 0x0a, 0x71, 0x3c, 0xb8, 0x9a, 0xa3, 0x06, 0xd6, 0x44, 0xf5,
	0x70, 0x86, 0xc0, 0x14, 0x38, 0xc9, 0x31, 0x3e, 0xe1, 0x31, 0x96, 0xc2, 0x56, 0x89, 0x74, 0xfb,
	0x6a, 0xd2, 0xc5, 0x18, 0xe2, 0x7e, 0xdc, 0x32, 0x0d, 0xbf, 0x81, 0x90, 0x3d, 0x84, 0xf7, 0x9e,
	0xf1, 0xf8, 0x79, 0x86, 0x91, 0xd9, 0xea, 0x1b, 0x5b, 0xdd, 0x9d, 0x4d, 0x57, 0x77, 0x92, 0x9e,
	0x50, 0x9d, 0x74, 0xcf, 0xb6, 0xdd, 0x12, 0xe2, 0x4f, 0xb0, 0xd6, 0xa7, 0xd0, 0xad, 0xb1, 0xb3,
	0x1e, 0xb4, 0x4f, 0x51, 0x97, 0xbb, 0xe3, 0xab, 0x23, 0x5b, 0x87, 0x95, 0xb3, 0x60, 0x54, 0x20,
	0xb1, 0x76, 0x7c, 0x6d, 0x3c, 0x6a, 0xed, 0x1a, 0xd6, 0xe7, 0xd0, 0x9b, 0xcf, 0xfc, 0x5a, 0xf1,
	0x07, 0x70, 0xe7, 0x8a, 0x24, 0xaf, 0x43, 0xe3, 0xfc, 0x6a, 0x40, 0x6f, 0xbe, 0x82, 0x0a, 0xfe,
	0x45, 0x81, 0x05, 0x96, 0x14, 0xda, 0x50, 0x13, 0xa5, 0x90, 0x28, 0x07, 0x71, 0xc9, 0x33, 0xb5,
	0xd9, 0x3e, 0xdc, 0x3c, 0xe2, 0x61, 0xad, 0x03, 0xc2, 0x6c, 0x53, 0x8f, 0xee, 0x5e, 0xd9, 0x23,
	0x7f, 0x3e, 0xc2, 0xf9, 0x9a, 0xa4, 0xec, 0x07, 0x69, 0x84, 0xa3, 0x9a, 0x94, 0x23, 0x1e, 0x0e,
	0xe2, 0x89, 0x14, 0x32, 0xfe, 0x57, 0xca, 0x54, 0x7c, 0xbb, 0x26, 0xde, 0xd9, 0x87, 0x8d, 0x9a,
	0x08, 0x91, 0xf1, 0x54, 0x20, 0xed, 0x49, 0xf3, 0x03, 0xeb, 0xb0, 0x72, 0x90, 0xe7, 0x3c, 0x9f,
	0x14, 0x8c, 0x0c, 0xe7, 0x1b, 0xf8, 0x70, 0x81, 0x84, 0x1d, 0x92, 0xea, 0x3a, 0xa7, 0x30, 0x0d,
	0xca, 0xdd, 0x9a, 0xcf, 0xbd, 0x82, 0xf8, 0x0b, 0x31, 0xce, 0xeb, 0x56, 0x29, 0x9c, 0x31, 0x58,
	0x56, 0xdb, 0x58, 0x2a, 0xa2, 0x33, 0xbb, 0x0f, 0x6b, 0x93, 0xf5, 0x3d, 0x0c, 0x22, 0x59, 0x2a,
	0x33, 0xfc, 0x39, 0x2f, 0xb3, 0x01, 0xbe, 0x14, 0x98, 0x3f, 0xfd, 0x21, 0xc5, 0x5c, 0xf7, 0xa0,
	0xe3, 0xd7, 0x3c, 0xac, 0x0f, 0xdd, 0x27, 0x39, 0x2f, 0xb2, 0x12, 0xb0, 0x4c, 0x80, 0xba, 0x8b,
	0x1d, 0xc2, 0x9a, 0x8f, 0x82, 0x17, 0x79, 0x84, 0xc7, 0xc9, 0x38, 0x91, 0x93, 0x15, 0xb6, 0x29,
	0x1b, 0x52, 0xe8, 0xce, 0x02, 0xf4, 0xda, 0xce, 0x45, 0x59, 0x7b, 0x70, 0xab, 0x01, 0xf6, 0xae,
	0xe1, 0x34, 0xea, 0xc3, 0xb9, 0x0b, 0x4c, 0x4f, 0xc3, 0x88, 0xb6, 0xc4, 0x47, 0x51, 0x8c, 0x24,
	0x73, 0xe0, 0x46, 0xe9, 0xc5, 0x78, 0x10, 0xeb, 0x62, 0x77, 0xfc, 0x19, 0x9f, 0x73, 0x1f, 0x7a,
	0xa4, 0x74, 0x90, 0xbe, 0xe4, 0x93, 0x51, 0x6a, 0x28, 0xab, 0xf3, 0x02, 0x3a, 0x53, 0x5c, 0x63,
	0xdd, 0x1f, 0xc2, 0x07, 0x7b, 0x91, 0x4c, 0xce, 0x50, 0xcf, 0x97, 0x30, 0x5b, 0x54, 0x8c, 0x9b,
	0xd3, 0xd6, 0xa2, 0xa4, 0x37, 0x66, 0x51, 0xce, 0xb7, 0x00, 0xd5, 0x65, 0x23, 0xb1, 0x0d, 0x40,
	0x2f, 0xc7, 0x47, 0x3c, 0x14, 0x94, 0xfa, 0x8a, 0x5f, 0xf3, 0xa8, 0xfb, 0x63, 0x0c, 0x44, 0x79,
	0xdf, 0xd6, 0xf7, 0x95, 0x67, 0xe7, 0xaf, 0x16, 0xac, 0xea, 0xb9, 0x62, 0x2f, 0x00, 0xf4, 0x89,
	0x02, 0x37, 0x1a, 0x37, 0xce, 0xba, 0xdd, 0x3c, 0x8c, 0xce, 0xdd, 0x5f, 0xfe, 0xfc, 0xf7, 0xb7,
	0xd6, 0x2d, 0x67, 0x4d, 0x7d, 0x55, 0xdf, 0xf3, 0xb0, 0xfc, 0xf1, 0x1e, 0x19, 0x0f, 0xd8, 0x57,
	0x00, 0xba, 0xa8, 0xb3, 0xbc, 0x33, 0x0b, 0x6a, 0xdd, 0x21, 0xf7, 0x62, 0x9b, 0x16, 0x89, 0x23,
	0xc2, 0x28, 0xe2, 0x13, 0xe8, 0xee, 0xe7, 0x18, 0x48, 0xd4, 0xf3, 0x0e, 0xd5, 0x64, 0x59, 0xb7,
	0x5d, 0xfd, 0x3b, 0xba, 0x93, 0x6f, 0xcf, 0x3d, 0x50, 0xdf, 0xab, 0xb3, 0x49, 0x6c, 0x1b, 0x56,
	0x4f, 0xb1, 0xbd, 0x52, 0x50, 0xef, 0x47, 0x55, 0xc7, 0x9f, 0x14, 0xdf, 0x53, 0xb8, 0xf1, 0x04,
	0x65, 0xd5, 0xc8, 0x8d, 0x8a, 0xb0, 0x36, 0x00, 0xd6, 0xda, 0xac, 0xdb, 0x31, 0x89, 0x93, 0xb1,
	0x05, 0xce, 0xc7, 0xfd, 0xb7, 0xff, 0xd8, 0x4b, 0x3f, 0x5f, 0xd8, 0xc6, 0x1f, 0x17, 0xb6, 0xf1,
	0xe6, 0xc2, 0x36, 0xfe, 0xbe, 0xb0, 0x8d, 0xd7, 0x97, 0xf6, 0xd2, 0x9b, 0x4b, 0x7b, 0xe9, 0xed,
	0xa5, 0xbd, 0x14, 0xae, 0x92, 0xbe, 0x4f, 0xfe, 0x0b, 0x00, 0x00, 0xff, 0xff, 0xb6, 0x92, 0x6b,
	0x47, 0x29, 0x08, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SubmitClient is the client API for Submit service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SubmitClient interface {
	SubmitJobs(ctx context.Context, in *JobSubmitRequest, opts ...grpc.CallOption) (*JobSubmitResponse, error)
	CancelJobs(ctx context.Context, in *JobCancelRequest, opts ...grpc.CallOption) (*CancellationResult, error)
	CreateQueue(ctx context.Context, in *Queue, opts ...grpc.CallOption) (*types.Empty, error)
	GetQueueInfo(ctx context.Context, in *QueueInfoRequest, opts ...grpc.CallOption) (*QueueInfo, error)
}

type submitClient struct {
	cc *grpc.ClientConn
}

func NewSubmitClient(cc *grpc.ClientConn) SubmitClient {
	return &submitClient{cc}
}

func (c *submitClient) SubmitJobs(ctx context.Context, in *JobSubmitRequest, opts ...grpc.CallOption) (*JobSubmitResponse, error) {
	out := new(JobSubmitResponse)
	err := c.cc.Invoke(ctx, "/api.Submit/SubmitJobs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *submitClient) CancelJobs(ctx context.Context, in *JobCancelRequest, opts ...grpc.CallOption) (*CancellationResult, error) {
	out := new(CancellationResult)
	err := c.cc.Invoke(ctx, "/api.Submit/CancelJobs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *submitClient) CreateQueue(ctx context.Context, in *Queue, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/api.Submit/CreateQueue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *submitClient) GetQueueInfo(ctx context.Context, in *QueueInfoRequest, opts ...grpc.CallOption) (*QueueInfo, error) {
	out := new(QueueInfo)
	err := c.cc.Invoke(ctx, "/api.Submit/GetQueueInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SubmitServer is the server API for Submit service.
type SubmitServer interface {
	SubmitJobs(context.Context, *JobSubmitRequest) (*JobSubmitResponse, error)
	CancelJobs(context.Context, *JobCancelRequest) (*CancellationResult, error)
	CreateQueue(context.Context, *Queue) (*types.Empty, error)
	GetQueueInfo(context.Context, *QueueInfoRequest) (*QueueInfo, error)
}

func RegisterSubmitServer(s *grpc.Server, srv SubmitServer) {
	s.RegisterService(&_Submit_serviceDesc, srv)
}

func _Submit_SubmitJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobSubmitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubmitServer).SubmitJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Submit/SubmitJobs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubmitServer).SubmitJobs(ctx, req.(*JobSubmitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Submit_CancelJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobCancelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubmitServer).CancelJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Submit/CancelJobs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubmitServer).CancelJobs(ctx, req.(*JobCancelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Submit_CreateQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Queue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubmitServer).CreateQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Submit/CreateQueue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubmitServer).CreateQueue(ctx, req.(*Queue))
	}
	return interceptor(ctx, in, info, handler)
}

func _Submit_GetQueueInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueueInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubmitServer).GetQueueInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Submit/GetQueueInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubmitServer).GetQueueInfo(ctx, req.(*QueueInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Submit_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Submit",
	HandlerType: (*SubmitServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubmitJobs",
			Handler:    _Submit_SubmitJobs_Handler,
		},
		{
			MethodName: "CancelJobs",
			Handler:    _Submit_CancelJobs_Handler,
		},
		{
			MethodName: "CreateQueue",
			Handler:    _Submit_CreateQueue_Handler,
		},
		{
			MethodName: "GetQueueInfo",
			Handler:    _Submit_GetQueueInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/api/submit.proto",
}

func (m *JobSubmitRequestItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JobSubmitRequestItem) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Priority != 0 {
		dAtA[i] = 0x9
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Priority))))
		i += 8
	}
	if m.PodSpec != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSubmit(dAtA, i, uint64(m.PodSpec.Size()))
		n1, err := m.PodSpec.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.Namespace) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSubmit(dAtA, i, uint64(len(m.Namespace)))
		i += copy(dAtA[i:], m.Namespace)
	}
	if len(m.Labels) > 0 {
		for k, _ := range m.Labels {
			dAtA[i] = 0x22
			i++
			v := m.Labels[k]
			mapSize := 1 + len(k) + sovSubmit(uint64(len(k))) + 1 + len(v) + sovSubmit(uint64(len(v)))
			i = encodeVarintSubmit(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintSubmit(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintSubmit(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if len(m.Annotations) > 0 {
		for k, _ := range m.Annotations {
			dAtA[i] = 0x2a
			i++
			v := m.Annotations[k]
			mapSize := 1 + len(k) + sovSubmit(uint64(len(k))) + 1 + len(v) + sovSubmit(uint64(len(v)))
			i = encodeVarintSubmit(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintSubmit(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintSubmit(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if len(m.RequiredNodeLabels) > 0 {
		for k, _ := range m.RequiredNodeLabels {
			dAtA[i] = 0x32
			i++
			v := m.RequiredNodeLabels[k]
			mapSize := 1 + len(k) + sovSubmit(uint64(len(k))) + 1 + len(v) + sovSubmit(uint64(len(v)))
			i = encodeVarintSubmit(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintSubmit(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintSubmit(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	return i, nil
}

func (m *JobSubmitRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JobSubmitRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Queue) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSubmit(dAtA, i, uint64(len(m.Queue)))
		i += copy(dAtA[i:], m.Queue)
	}
	if len(m.JobSetId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSubmit(dAtA, i, uint64(len(m.JobSetId)))
		i += copy(dAtA[i:], m.JobSetId)
	}
	if len(m.JobRequestItems) > 0 {
		for _, msg := range m.JobRequestItems {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintSubmit(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *JobCancelRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JobCancelRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.JobId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSubmit(dAtA, i, uint64(len(m.JobId)))
		i += copy(dAtA[i:], m.JobId)
	}
	if len(m.JobSetId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSubmit(dAtA, i, uint64(len(m.JobSetId)))
		i += copy(dAtA[i:], m.JobSetId)
	}
	if len(m.Queue) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSubmit(dAtA, i, uint64(len(m.Queue)))
		i += copy(dAtA[i:], m.Queue)
	}
	return i, nil
}

func (m *JobSubmitResponseItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JobSubmitResponseItem) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.JobId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSubmit(dAtA, i, uint64(len(m.JobId)))
		i += copy(dAtA[i:], m.JobId)
	}
	if len(m.Error) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSubmit(dAtA, i, uint64(len(m.Error)))
		i += copy(dAtA[i:], m.Error)
	}
	return i, nil
}

func (m *JobSubmitResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JobSubmitResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.JobResponseItems) > 0 {
		for _, msg := range m.JobResponseItems {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSubmit(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Queue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Queue) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSubmit(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.PriorityFactor != 0 {
		dAtA[i] = 0x11
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.PriorityFactor))))
		i += 8
	}
	if len(m.UserOwners) > 0 {
		for _, s := range m.UserOwners {
			dAtA[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.GroupOwners) > 0 {
		for _, s := range m.GroupOwners {
			dAtA[i] = 0x22
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.ResourceLimits) > 0 {
		for k, _ := range m.ResourceLimits {
			dAtA[i] = 0x2a
			i++
			v := m.ResourceLimits[k]
			mapSize := 1 + len(k) + sovSubmit(uint64(len(k))) + 1 + 8
			i = encodeVarintSubmit(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintSubmit(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x11
			i++
			encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(v))))
			i += 8
		}
	}
	return i, nil
}

func (m *CancellationResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CancellationResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CancelledIds) > 0 {
		for _, s := range m.CancelledIds {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *QueueInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueueInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSubmit(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func (m *QueueInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueueInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSubmit(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.ActiveJobSets) > 0 {
		for _, msg := range m.ActiveJobSets {
			dAtA[i] = 0x12
			i++
			i = encodeVarintSubmit(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *JobSetInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JobSetInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSubmit(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.QueuedJobs != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSubmit(dAtA, i, uint64(m.QueuedJobs))
	}
	if m.LeasedJobs != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSubmit(dAtA, i, uint64(m.LeasedJobs))
	}
	return i, nil
}

func encodeVarintSubmit(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *JobSubmitRequestItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Priority != 0 {
		n += 9
	}
	if m.PodSpec != nil {
		l = m.PodSpec.Size()
		n += 1 + l + sovSubmit(uint64(l))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovSubmit(uint64(l))
	}
	if len(m.Labels) > 0 {
		for k, v := range m.Labels {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovSubmit(uint64(len(k))) + 1 + len(v) + sovSubmit(uint64(len(v)))
			n += mapEntrySize + 1 + sovSubmit(uint64(mapEntrySize))
		}
	}
	if len(m.Annotations) > 0 {
		for k, v := range m.Annotations {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovSubmit(uint64(len(k))) + 1 + len(v) + sovSubmit(uint64(len(v)))
			n += mapEntrySize + 1 + sovSubmit(uint64(mapEntrySize))
		}
	}
	if len(m.RequiredNodeLabels) > 0 {
		for k, v := range m.RequiredNodeLabels {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovSubmit(uint64(len(k))) + 1 + len(v) + sovSubmit(uint64(len(v)))
			n += mapEntrySize + 1 + sovSubmit(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *JobSubmitRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Queue)
	if l > 0 {
		n += 1 + l + sovSubmit(uint64(l))
	}
	l = len(m.JobSetId)
	if l > 0 {
		n += 1 + l + sovSubmit(uint64(l))
	}
	if len(m.JobRequestItems) > 0 {
		for _, e := range m.JobRequestItems {
			l = e.Size()
			n += 1 + l + sovSubmit(uint64(l))
		}
	}
	return n
}

func (m *JobCancelRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.JobId)
	if l > 0 {
		n += 1 + l + sovSubmit(uint64(l))
	}
	l = len(m.JobSetId)
	if l > 0 {
		n += 1 + l + sovSubmit(uint64(l))
	}
	l = len(m.Queue)
	if l > 0 {
		n += 1 + l + sovSubmit(uint64(l))
	}
	return n
}

func (m *JobSubmitResponseItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.JobId)
	if l > 0 {
		n += 1 + l + sovSubmit(uint64(l))
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovSubmit(uint64(l))
	}
	return n
}

func (m *JobSubmitResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.JobResponseItems) > 0 {
		for _, e := range m.JobResponseItems {
			l = e.Size()
			n += 1 + l + sovSubmit(uint64(l))
		}
	}
	return n
}

func (m *Queue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSubmit(uint64(l))
	}
	if m.PriorityFactor != 0 {
		n += 9
	}
	if len(m.UserOwners) > 0 {
		for _, s := range m.UserOwners {
			l = len(s)
			n += 1 + l + sovSubmit(uint64(l))
		}
	}
	if len(m.GroupOwners) > 0 {
		for _, s := range m.GroupOwners {
			l = len(s)
			n += 1 + l + sovSubmit(uint64(l))
		}
	}
	if len(m.ResourceLimits) > 0 {
		for k, v := range m.ResourceLimits {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovSubmit(uint64(len(k))) + 1 + 8
			n += mapEntrySize + 1 + sovSubmit(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *CancellationResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CancelledIds) > 0 {
		for _, s := range m.CancelledIds {
			l = len(s)
			n += 1 + l + sovSubmit(uint64(l))
		}
	}
	return n
}

func (m *QueueInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSubmit(uint64(l))
	}
	return n
}

func (m *QueueInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSubmit(uint64(l))
	}
	if len(m.ActiveJobSets) > 0 {
		for _, e := range m.ActiveJobSets {
			l = e.Size()
			n += 1 + l + sovSubmit(uint64(l))
		}
	}
	return n
}

func (m *JobSetInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSubmit(uint64(l))
	}
	if m.QueuedJobs != 0 {
		n += 1 + sovSubmit(uint64(m.QueuedJobs))
	}
	if m.LeasedJobs != 0 {
		n += 1 + sovSubmit(uint64(m.LeasedJobs))
	}
	return n
}

func sovSubmit(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSubmit(x uint64) (n int) {
	return sovSubmit(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *JobSubmitRequestItem) String() string {
	if this == nil {
		return "nil"
	}
	keysForLabels := make([]string, 0, len(this.Labels))
	for k, _ := range this.Labels {
		keysForLabels = append(keysForLabels, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForLabels)
	mapStringForLabels := "map[string]string{"
	for _, k := range keysForLabels {
		mapStringForLabels += fmt.Sprintf("%v: %v,", k, this.Labels[k])
	}
	mapStringForLabels += "}"
	keysForAnnotations := make([]string, 0, len(this.Annotations))
	for k, _ := range this.Annotations {
		keysForAnnotations = append(keysForAnnotations, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForAnnotations)
	mapStringForAnnotations := "map[string]string{"
	for _, k := range keysForAnnotations {
		mapStringForAnnotations += fmt.Sprintf("%v: %v,", k, this.Annotations[k])
	}
	mapStringForAnnotations += "}"
	keysForRequiredNodeLabels := make([]string, 0, len(this.RequiredNodeLabels))
	for k, _ := range this.RequiredNodeLabels {
		keysForRequiredNodeLabels = append(keysForRequiredNodeLabels, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForRequiredNodeLabels)
	mapStringForRequiredNodeLabels := "map[string]string{"
	for _, k := range keysForRequiredNodeLabels {
		mapStringForRequiredNodeLabels += fmt.Sprintf("%v: %v,", k, this.RequiredNodeLabels[k])
	}
	mapStringForRequiredNodeLabels += "}"
	s := strings.Join([]string{`&JobSubmitRequestItem{`,
		`Priority:` + fmt.Sprintf("%v", this.Priority) + `,`,
		`PodSpec:` + strings.Replace(fmt.Sprintf("%v", this.PodSpec), "PodSpec", "v1.PodSpec", 1) + `,`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`Labels:` + mapStringForLabels + `,`,
		`Annotations:` + mapStringForAnnotations + `,`,
		`RequiredNodeLabels:` + mapStringForRequiredNodeLabels + `,`,
		`}`,
	}, "")
	return s
}
func (this *JobSubmitRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&JobSubmitRequest{`,
		`Queue:` + fmt.Sprintf("%v", this.Queue) + `,`,
		`JobSetId:` + fmt.Sprintf("%v", this.JobSetId) + `,`,
		`JobRequestItems:` + strings.Replace(fmt.Sprintf("%v", this.JobRequestItems), "JobSubmitRequestItem", "JobSubmitRequestItem", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *JobCancelRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&JobCancelRequest{`,
		`JobId:` + fmt.Sprintf("%v", this.JobId) + `,`,
		`JobSetId:` + fmt.Sprintf("%v", this.JobSetId) + `,`,
		`Queue:` + fmt.Sprintf("%v", this.Queue) + `,`,
		`}`,
	}, "")
	return s
}
func (this *JobSubmitResponseItem) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&JobSubmitResponseItem{`,
		`JobId:` + fmt.Sprintf("%v", this.JobId) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *JobSubmitResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&JobSubmitResponse{`,
		`JobResponseItems:` + strings.Replace(fmt.Sprintf("%v", this.JobResponseItems), "JobSubmitResponseItem", "JobSubmitResponseItem", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Queue) String() string {
	if this == nil {
		return "nil"
	}
	keysForResourceLimits := make([]string, 0, len(this.ResourceLimits))
	for k, _ := range this.ResourceLimits {
		keysForResourceLimits = append(keysForResourceLimits, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForResourceLimits)
	mapStringForResourceLimits := "map[string]float64{"
	for _, k := range keysForResourceLimits {
		mapStringForResourceLimits += fmt.Sprintf("%v: %v,", k, this.ResourceLimits[k])
	}
	mapStringForResourceLimits += "}"
	s := strings.Join([]string{`&Queue{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`PriorityFactor:` + fmt.Sprintf("%v", this.PriorityFactor) + `,`,
		`UserOwners:` + fmt.Sprintf("%v", this.UserOwners) + `,`,
		`GroupOwners:` + fmt.Sprintf("%v", this.GroupOwners) + `,`,
		`ResourceLimits:` + mapStringForResourceLimits + `,`,
		`}`,
	}, "")
	return s
}
func (this *CancellationResult) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CancellationResult{`,
		`CancelledIds:` + fmt.Sprintf("%v", this.CancelledIds) + `,`,
		`}`,
	}, "")
	return s
}
func (this *QueueInfoRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&QueueInfoRequest{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`}`,
	}, "")
	return s
}
func (this *QueueInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&QueueInfo{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ActiveJobSets:` + strings.Replace(fmt.Sprintf("%v", this.ActiveJobSets), "JobSetInfo", "JobSetInfo", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *JobSetInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&JobSetInfo{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`QueuedJobs:` + fmt.Sprintf("%v", this.QueuedJobs) + `,`,
		`LeasedJobs:` + fmt.Sprintf("%v", this.LeasedJobs) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringSubmit(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *JobSubmitRequestItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSubmit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JobSubmitRequestItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JobSubmitRequestItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Priority", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Priority = float64(math.Float64frombits(v))
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodSpec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubmit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSubmit
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSubmit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PodSpec == nil {
				m.PodSpec = &v1.PodSpec{}
			}
			if err := m.PodSpec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubmit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSubmit
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSubmit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Labels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubmit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSubmit
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSubmit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Labels == nil {
				m.Labels = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSubmit
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSubmit
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthSubmit
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthSubmit
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSubmit
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthSubmit
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthSubmit
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipSubmit(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthSubmit
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Labels[mapkey] = mapvalue
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Annotations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubmit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSubmit
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSubmit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Annotations == nil {
				m.Annotations = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSubmit
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSubmit
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthSubmit
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthSubmit
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSubmit
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthSubmit
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthSubmit
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipSubmit(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthSubmit
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Annotations[mapkey] = mapvalue
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequiredNodeLabels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubmit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSubmit
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSubmit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RequiredNodeLabels == nil {
				m.RequiredNodeLabels = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSubmit
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSubmit
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthSubmit
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthSubmit
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSubmit
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthSubmit
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthSubmit
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipSubmit(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthSubmit
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.RequiredNodeLabels[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSubmit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSubmit
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSubmit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JobSubmitRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSubmit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JobSubmitRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JobSubmitRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Queue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubmit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSubmit
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSubmit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Queue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobSetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubmit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSubmit
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSubmit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobSetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobRequestItems", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubmit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSubmit
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSubmit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobRequestItems = append(m.JobRequestItems, &JobSubmitRequestItem{})
			if err := m.JobRequestItems[len(m.JobRequestItems)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSubmit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSubmit
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSubmit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JobCancelRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSubmit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JobCancelRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JobCancelRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubmit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSubmit
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSubmit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobSetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubmit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSubmit
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSubmit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobSetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Queue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubmit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSubmit
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSubmit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Queue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSubmit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSubmit
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSubmit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JobSubmitResponseItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSubmit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JobSubmitResponseItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JobSubmitResponseItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubmit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSubmit
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSubmit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubmit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSubmit
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSubmit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSubmit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSubmit
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSubmit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JobSubmitResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSubmit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JobSubmitResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JobSubmitResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobResponseItems", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubmit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSubmit
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSubmit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobResponseItems = append(m.JobResponseItems, &JobSubmitResponseItem{})
			if err := m.JobResponseItems[len(m.JobResponseItems)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSubmit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSubmit
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSubmit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Queue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSubmit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Queue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Queue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubmit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSubmit
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSubmit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriorityFactor", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.PriorityFactor = float64(math.Float64frombits(v))
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserOwners", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubmit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSubmit
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSubmit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserOwners = append(m.UserOwners, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupOwners", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubmit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSubmit
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSubmit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupOwners = append(m.GroupOwners, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceLimits", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubmit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSubmit
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSubmit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ResourceLimits == nil {
				m.ResourceLimits = make(map[string]float64)
			}
			var mapkey string
			var mapvalue float64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSubmit
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSubmit
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthSubmit
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthSubmit
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapvaluetemp uint64
					if (iNdEx + 8) > l {
						return io.ErrUnexpectedEOF
					}
					mapvaluetemp = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
					iNdEx += 8
					mapvalue = math.Float64frombits(mapvaluetemp)
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipSubmit(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthSubmit
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ResourceLimits[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSubmit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSubmit
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSubmit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CancellationResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSubmit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CancellationResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CancellationResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CancelledIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubmit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSubmit
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSubmit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CancelledIds = append(m.CancelledIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSubmit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSubmit
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSubmit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueueInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSubmit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueueInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueueInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubmit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSubmit
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSubmit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSubmit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSubmit
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSubmit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueueInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSubmit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueueInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueueInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubmit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSubmit
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSubmit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveJobSets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubmit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSubmit
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSubmit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActiveJobSets = append(m.ActiveJobSets, &JobSetInfo{})
			if err := m.ActiveJobSets[len(m.ActiveJobSets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSubmit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSubmit
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSubmit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JobSetInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSubmit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JobSetInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JobSetInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubmit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSubmit
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSubmit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueuedJobs", wireType)
			}
			m.QueuedJobs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubmit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.QueuedJobs |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeasedJobs", wireType)
			}
			m.LeasedJobs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubmit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LeasedJobs |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSubmit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSubmit
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSubmit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSubmit(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSubmit
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSubmit
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSubmit
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSubmit
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthSubmit
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSubmit
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSubmit(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthSubmit
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSubmit = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSubmit   = fmt.Errorf("proto: integer overflow")
)
