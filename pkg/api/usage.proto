syntax = 'proto3';

package api;

import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";
import "k8s.io/apimachinery/pkg/api/resource/generated.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";

option (gogoproto.goproto_stringer_all) = false;
option (gogoproto.stringer_all) = true;

message QueueReport {
    string Name = 1;
    map<string, k8s.io.apimachinery.pkg.api.resource.Quantity> Resources = 2 [(gogoproto.nullable) = false];
    map<string, k8s.io.apimachinery.pkg.api.resource.Quantity> ResourcesUsed = 3 [(gogoproto.nullable) = false];
}

message ClusterUsageReport {
    string ClusterId = 1;
    string Pool = 6;
    google.protobuf.Timestamp ReportTime = 2 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];
    repeated QueueReport Queues = 3;
    map<string, k8s.io.apimachinery.pkg.api.resource.Quantity> ClusterCapacity = 4 [(gogoproto.nullable) = false];
    map<string, k8s.io.apimachinery.pkg.api.resource.Quantity> ClusterAvailableCapacity = 5 [(gogoproto.nullable) = false];
}

service Usage {
    rpc ReportUsage (ClusterUsageReport) returns (google.protobuf.Empty);
}
