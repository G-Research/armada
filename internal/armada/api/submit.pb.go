// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: internal/armada/api/submit.proto

package api

import (
	context "context"
	encoding_binary "encoding/binary"
	fmt "fmt"
	io "io"
	math "math"

	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	grpc "google.golang.org/grpc"
	v1 "k8s.io/api/core/v1"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type JobRequest struct {
	Queue    string      `protobuf:"bytes,1,opt,name=Queue,proto3" json:"Queue,omitempty"`
	JobSetId string      `protobuf:"bytes,2,opt,name=JobSetId,proto3" json:"JobSetId,omitempty"`
	Priority float64     `protobuf:"fixed64,3,opt,name=Priority,proto3" json:"Priority,omitempty"`
	PodSpec  *v1.PodSpec `protobuf:"bytes,4,opt,name=PodSpec,proto3" json:"PodSpec,omitempty"`
}

func (m *JobRequest) Reset()         { *m = JobRequest{} }
func (m *JobRequest) String() string { return proto.CompactTextString(m) }
func (*JobRequest) ProtoMessage()    {}
func (*JobRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_83bbfbf574fac779, []int{0}
}
func (m *JobRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JobRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JobRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JobRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobRequest.Merge(m, src)
}
func (m *JobRequest) XXX_Size() int {
	return m.Size()
}
func (m *JobRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_JobRequest.DiscardUnknown(m)
}

var xxx_messageInfo_JobRequest proto.InternalMessageInfo

func (m *JobRequest) GetQueue() string {
	if m != nil {
		return m.Queue
	}
	return ""
}

func (m *JobRequest) GetJobSetId() string {
	if m != nil {
		return m.JobSetId
	}
	return ""
}

func (m *JobRequest) GetPriority() float64 {
	if m != nil {
		return m.Priority
	}
	return 0
}

func (m *JobRequest) GetPodSpec() *v1.PodSpec {
	if m != nil {
		return m.PodSpec
	}
	return nil
}

type JobCancelRequest struct {
	JobId    string `protobuf:"bytes,1,opt,name=JobId,proto3" json:"JobId,omitempty"`
	JobSetId string `protobuf:"bytes,2,opt,name=JobSetId,proto3" json:"JobSetId,omitempty"`
	Queue    string `protobuf:"bytes,3,opt,name=Queue,proto3" json:"Queue,omitempty"`
}

func (m *JobCancelRequest) Reset()         { *m = JobCancelRequest{} }
func (m *JobCancelRequest) String() string { return proto.CompactTextString(m) }
func (*JobCancelRequest) ProtoMessage()    {}
func (*JobCancelRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_83bbfbf574fac779, []int{1}
}
func (m *JobCancelRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JobCancelRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JobCancelRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JobCancelRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobCancelRequest.Merge(m, src)
}
func (m *JobCancelRequest) XXX_Size() int {
	return m.Size()
}
func (m *JobCancelRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_JobCancelRequest.DiscardUnknown(m)
}

var xxx_messageInfo_JobCancelRequest proto.InternalMessageInfo

func (m *JobCancelRequest) GetJobId() string {
	if m != nil {
		return m.JobId
	}
	return ""
}

func (m *JobCancelRequest) GetJobSetId() string {
	if m != nil {
		return m.JobSetId
	}
	return ""
}

func (m *JobCancelRequest) GetQueue() string {
	if m != nil {
		return m.Queue
	}
	return ""
}

type JobSubmitResponse struct {
	JobId string `protobuf:"bytes,1,opt,name=JobId,proto3" json:"JobId,omitempty"`
}

func (m *JobSubmitResponse) Reset()         { *m = JobSubmitResponse{} }
func (m *JobSubmitResponse) String() string { return proto.CompactTextString(m) }
func (*JobSubmitResponse) ProtoMessage()    {}
func (*JobSubmitResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_83bbfbf574fac779, []int{2}
}
func (m *JobSubmitResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JobSubmitResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JobSubmitResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JobSubmitResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobSubmitResponse.Merge(m, src)
}
func (m *JobSubmitResponse) XXX_Size() int {
	return m.Size()
}
func (m *JobSubmitResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_JobSubmitResponse.DiscardUnknown(m)
}

var xxx_messageInfo_JobSubmitResponse proto.InternalMessageInfo

func (m *JobSubmitResponse) GetJobId() string {
	if m != nil {
		return m.JobId
	}
	return ""
}

type Queue struct {
	Name           string   `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	PriorityFactor float64  `protobuf:"fixed64,2,opt,name=PriorityFactor,proto3" json:"PriorityFactor,omitempty"`
	UserOwners     []string `protobuf:"bytes,3,rep,name=UserOwners,proto3" json:"UserOwners,omitempty"`
	GroupOwners    []string `protobuf:"bytes,4,rep,name=GroupOwners,proto3" json:"GroupOwners,omitempty"`
}

func (m *Queue) Reset()         { *m = Queue{} }
func (m *Queue) String() string { return proto.CompactTextString(m) }
func (*Queue) ProtoMessage()    {}
func (*Queue) Descriptor() ([]byte, []int) {
	return fileDescriptor_83bbfbf574fac779, []int{3}
}
func (m *Queue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Queue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Queue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Queue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Queue.Merge(m, src)
}
func (m *Queue) XXX_Size() int {
	return m.Size()
}
func (m *Queue) XXX_DiscardUnknown() {
	xxx_messageInfo_Queue.DiscardUnknown(m)
}

var xxx_messageInfo_Queue proto.InternalMessageInfo

func (m *Queue) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Queue) GetPriorityFactor() float64 {
	if m != nil {
		return m.PriorityFactor
	}
	return 0
}

func (m *Queue) GetUserOwners() []string {
	if m != nil {
		return m.UserOwners
	}
	return nil
}

func (m *Queue) GetGroupOwners() []string {
	if m != nil {
		return m.GroupOwners
	}
	return nil
}

type CancellationResult struct {
	CancelledIds []string `protobuf:"bytes,1,rep,name=CancelledIds,proto3" json:"CancelledIds,omitempty"`
}

func (m *CancellationResult) Reset()         { *m = CancellationResult{} }
func (m *CancellationResult) String() string { return proto.CompactTextString(m) }
func (*CancellationResult) ProtoMessage()    {}
func (*CancellationResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_83bbfbf574fac779, []int{4}
}
func (m *CancellationResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CancellationResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CancellationResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CancellationResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CancellationResult.Merge(m, src)
}
func (m *CancellationResult) XXX_Size() int {
	return m.Size()
}
func (m *CancellationResult) XXX_DiscardUnknown() {
	xxx_messageInfo_CancellationResult.DiscardUnknown(m)
}

var xxx_messageInfo_CancellationResult proto.InternalMessageInfo

func (m *CancellationResult) GetCancelledIds() []string {
	if m != nil {
		return m.CancelledIds
	}
	return nil
}

func init() {
	proto.RegisterType((*JobRequest)(nil), "api.JobRequest")
	proto.RegisterType((*JobCancelRequest)(nil), "api.JobCancelRequest")
	proto.RegisterType((*JobSubmitResponse)(nil), "api.JobSubmitResponse")
	proto.RegisterType((*Queue)(nil), "api.Queue")
	proto.RegisterType((*CancellationResult)(nil), "api.CancellationResult")
}

func init() { proto.RegisterFile("internal/armada/api/submit.proto", fileDescriptor_83bbfbf574fac779) }

var fileDescriptor_83bbfbf574fac779 = []byte{
	// 461 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0xcf, 0x6e, 0xd3, 0x40,
	0x10, 0xc6, 0xb3, 0x38, 0x14, 0x32, 0x41, 0xfc, 0x59, 0x41, 0xb1, 0x5c, 0xc9, 0xb2, 0x7c, 0x40,
	0xe1, 0xb2, 0x56, 0x0a, 0x48, 0x3d, 0x70, 0xa2, 0x02, 0x14, 0x1f, 0xa0, 0xb8, 0xe2, 0xc2, 0x6d,
	0x1d, 0x0f, 0x91, 0x85, 0xe3, 0x31, 0xbb, 0xeb, 0xa2, 0x3e, 0x00, 0x77, 0x78, 0x12, 0x5e, 0x83,
	0x63, 0x8f, 0x1c, 0x51, 0xf2, 0x22, 0x28, 0xbb, 0x71, 0x48, 0xab, 0xa8, 0xb7, 0x9d, 0x6f, 0x7f,
	0x3b, 0xfa, 0xe6, 0xdb, 0x81, 0xa8, 0xac, 0x0d, 0xaa, 0x5a, 0x56, 0x89, 0x54, 0x73, 0x59, 0xc8,
	0x44, 0x36, 0x65, 0xa2, 0xdb, 0x7c, 0x5e, 0x1a, 0xd1, 0x28, 0x32, 0xc4, 0x3d, 0xd9, 0x94, 0xc1,
	0xc1, 0x8c, 0x68, 0x56, 0x61, 0x62, 0xa5, 0xbc, 0xfd, 0x9c, 0xe0, 0xbc, 0x31, 0xe7, 0x8e, 0x08,
	0xe2, 0x2f, 0x47, 0x5a, 0x94, 0x64, 0x9f, 0x4e, 0x49, 0x61, 0x72, 0x36, 0x4e, 0x66, 0x58, 0xa3,
	0x92, 0x06, 0x0b, 0xc7, 0xc4, 0x3f, 0x19, 0x40, 0x4a, 0x79, 0x86, 0x5f, 0x5b, 0xd4, 0x86, 0x3f,
	0x84, 0x9b, 0x1f, 0x5a, 0x6c, 0xd1, 0x67, 0x11, 0x1b, 0x0d, 0x32, 0x57, 0xf0, 0x00, 0x6e, 0xa7,
	0x94, 0x9f, 0xa2, 0x99, 0x14, 0xfe, 0x0d, 0x7b, 0xb1, 0xa9, 0x57, 0x77, 0x27, 0xaa, 0x24, 0x55,
	0x9a, 0x73, 0xdf, 0x8b, 0xd8, 0x88, 0x65, 0x9b, 0x9a, 0xbf, 0x80, 0x5b, 0x27, 0x54, 0x9c, 0x36,
	0x38, 0xf5, 0xfb, 0x11, 0x1b, 0x0d, 0x0f, 0x0f, 0x84, 0xb3, 0x24, 0x64, 0x53, 0x8a, 0x95, 0x25,
	0x71, 0x36, 0x16, 0x6b, 0x24, 0xeb, 0xd8, 0xf8, 0x13, 0xdc, 0x4f, 0x29, 0x3f, 0x96, 0xf5, 0x14,
	0xab, 0x2d, 0x63, 0x29, 0xe5, 0x93, 0xa2, 0x33, 0x66, 0x8b, 0x6b, 0x8d, 0x6d, 0x46, 0xf1, 0xb6,
	0x46, 0x89, 0x9f, 0xc2, 0x83, 0x15, 0x61, 0x83, 0xcc, 0x50, 0x37, 0x54, 0x6b, 0xdc, 0xdd, 0x3c,
	0xfe, 0xce, 0xd6, 0x1d, 0x38, 0x87, 0xfe, 0x3b, 0x39, 0xef, 0x42, 0xb1, 0x67, 0xfe, 0x04, 0xee,
	0x76, 0x73, 0xbe, 0x91, 0x53, 0x43, 0xca, 0x1a, 0x60, 0xd9, 0x15, 0x95, 0x87, 0x00, 0x1f, 0x35,
	0xaa, 0xf7, 0xdf, 0x6a, 0x54, 0xda, 0xf7, 0x22, 0x6f, 0x34, 0xc8, 0xb6, 0x14, 0x1e, 0xc1, 0xf0,
	0xad, 0xa2, 0xb6, 0x59, 0x03, 0x7d, 0x0b, 0x6c, 0x4b, 0xf1, 0x11, 0x70, 0x97, 0x45, 0x25, 0x4d,
	0x49, 0x75, 0x86, 0xba, 0xad, 0x0c, 0x8f, 0xe1, 0xce, 0x5a, 0xc5, 0x62, 0x52, 0x68, 0x9f, 0xd9,
	0x87, 0x97, 0xb4, 0xc3, 0x5f, 0x0c, 0xf6, 0xdc, 0xa8, 0xfc, 0x39, 0x0c, 0xdc, 0x29, 0xa5, 0x9c,
	0xdf, 0xb3, 0xf9, 0xff, 0xff, 0xf6, 0x60, 0xbf, 0x13, 0xae, 0x04, 0xf3, 0x12, 0xc0, 0x35, 0x4c,
	0x29, 0xd7, 0xfc, 0x51, 0x47, 0x5d, 0xfa, 0x9a, 0xe0, 0xb1, 0x95, 0x77, 0x58, 0x1c, 0xc3, 0xf0,
	0x58, 0xa1, 0x34, 0xe8, 0x52, 0x04, 0xcb, 0xd9, 0x73, 0xb0, 0x2f, 0xdc, 0xe2, 0x8a, 0x6e, 0x71,
	0xc5, 0xeb, 0xd5, 0xe2, 0xbe, 0xf2, 0x7f, 0x2f, 0x42, 0x76, 0xb1, 0x08, 0xd9, 0xdf, 0x45, 0xc8,
	0x7e, 0x2c, 0xc3, 0xde, 0xc5, 0x32, 0xec, 0xfd, 0x59, 0x86, 0xbd, 0x7c, 0xcf, 0x92, 0xcf, 0xfe,
	0x05, 0x00, 0x00, 0xff, 0xff, 0x56, 0xa8, 0x23, 0x83, 0x19, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SubmitClient is the client API for Submit service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SubmitClient interface {
	SubmitJob(ctx context.Context, in *JobRequest, opts ...grpc.CallOption) (*JobSubmitResponse, error)
	CancelJobs(ctx context.Context, in *JobCancelRequest, opts ...grpc.CallOption) (*CancellationResult, error)
	CreateQueue(ctx context.Context, in *Queue, opts ...grpc.CallOption) (*types.Empty, error)
}

type submitClient struct {
	cc *grpc.ClientConn
}

func NewSubmitClient(cc *grpc.ClientConn) SubmitClient {
	return &submitClient{cc}
}

func (c *submitClient) SubmitJob(ctx context.Context, in *JobRequest, opts ...grpc.CallOption) (*JobSubmitResponse, error) {
	out := new(JobSubmitResponse)
	err := c.cc.Invoke(ctx, "/api.Submit/SubmitJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *submitClient) CancelJobs(ctx context.Context, in *JobCancelRequest, opts ...grpc.CallOption) (*CancellationResult, error) {
	out := new(CancellationResult)
	err := c.cc.Invoke(ctx, "/api.Submit/CancelJobs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *submitClient) CreateQueue(ctx context.Context, in *Queue, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/api.Submit/CreateQueue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SubmitServer is the server API for Submit service.
type SubmitServer interface {
	SubmitJob(context.Context, *JobRequest) (*JobSubmitResponse, error)
	CancelJobs(context.Context, *JobCancelRequest) (*CancellationResult, error)
	CreateQueue(context.Context, *Queue) (*types.Empty, error)
}

func RegisterSubmitServer(s *grpc.Server, srv SubmitServer) {
	s.RegisterService(&_Submit_serviceDesc, srv)
}

func _Submit_SubmitJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubmitServer).SubmitJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Submit/SubmitJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubmitServer).SubmitJob(ctx, req.(*JobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Submit_CancelJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobCancelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubmitServer).CancelJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Submit/CancelJobs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubmitServer).CancelJobs(ctx, req.(*JobCancelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Submit_CreateQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Queue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubmitServer).CreateQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Submit/CreateQueue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubmitServer).CreateQueue(ctx, req.(*Queue))
	}
	return interceptor(ctx, in, info, handler)
}

var _Submit_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Submit",
	HandlerType: (*SubmitServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubmitJob",
			Handler:    _Submit_SubmitJob_Handler,
		},
		{
			MethodName: "CancelJobs",
			Handler:    _Submit_CancelJobs_Handler,
		},
		{
			MethodName: "CreateQueue",
			Handler:    _Submit_CreateQueue_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/armada/api/submit.proto",
}

func (m *JobRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JobRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Queue) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSubmit(dAtA, i, uint64(len(m.Queue)))
		i += copy(dAtA[i:], m.Queue)
	}
	if len(m.JobSetId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSubmit(dAtA, i, uint64(len(m.JobSetId)))
		i += copy(dAtA[i:], m.JobSetId)
	}
	if m.Priority != 0 {
		dAtA[i] = 0x19
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Priority))))
		i += 8
	}
	if m.PodSpec != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSubmit(dAtA, i, uint64(m.PodSpec.Size()))
		n1, err := m.PodSpec.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *JobCancelRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JobCancelRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.JobId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSubmit(dAtA, i, uint64(len(m.JobId)))
		i += copy(dAtA[i:], m.JobId)
	}
	if len(m.JobSetId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSubmit(dAtA, i, uint64(len(m.JobSetId)))
		i += copy(dAtA[i:], m.JobSetId)
	}
	if len(m.Queue) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSubmit(dAtA, i, uint64(len(m.Queue)))
		i += copy(dAtA[i:], m.Queue)
	}
	return i, nil
}

func (m *JobSubmitResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JobSubmitResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.JobId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSubmit(dAtA, i, uint64(len(m.JobId)))
		i += copy(dAtA[i:], m.JobId)
	}
	return i, nil
}

func (m *Queue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Queue) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSubmit(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.PriorityFactor != 0 {
		dAtA[i] = 0x11
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.PriorityFactor))))
		i += 8
	}
	if len(m.UserOwners) > 0 {
		for _, s := range m.UserOwners {
			dAtA[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.GroupOwners) > 0 {
		for _, s := range m.GroupOwners {
			dAtA[i] = 0x22
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *CancellationResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CancellationResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CancelledIds) > 0 {
		for _, s := range m.CancelledIds {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func encodeVarintSubmit(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *JobRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Queue)
	if l > 0 {
		n += 1 + l + sovSubmit(uint64(l))
	}
	l = len(m.JobSetId)
	if l > 0 {
		n += 1 + l + sovSubmit(uint64(l))
	}
	if m.Priority != 0 {
		n += 9
	}
	if m.PodSpec != nil {
		l = m.PodSpec.Size()
		n += 1 + l + sovSubmit(uint64(l))
	}
	return n
}

func (m *JobCancelRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.JobId)
	if l > 0 {
		n += 1 + l + sovSubmit(uint64(l))
	}
	l = len(m.JobSetId)
	if l > 0 {
		n += 1 + l + sovSubmit(uint64(l))
	}
	l = len(m.Queue)
	if l > 0 {
		n += 1 + l + sovSubmit(uint64(l))
	}
	return n
}

func (m *JobSubmitResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.JobId)
	if l > 0 {
		n += 1 + l + sovSubmit(uint64(l))
	}
	return n
}

func (m *Queue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSubmit(uint64(l))
	}
	if m.PriorityFactor != 0 {
		n += 9
	}
	if len(m.UserOwners) > 0 {
		for _, s := range m.UserOwners {
			l = len(s)
			n += 1 + l + sovSubmit(uint64(l))
		}
	}
	if len(m.GroupOwners) > 0 {
		for _, s := range m.GroupOwners {
			l = len(s)
			n += 1 + l + sovSubmit(uint64(l))
		}
	}
	return n
}

func (m *CancellationResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CancelledIds) > 0 {
		for _, s := range m.CancelledIds {
			l = len(s)
			n += 1 + l + sovSubmit(uint64(l))
		}
	}
	return n
}

func sovSubmit(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSubmit(x uint64) (n int) {
	return sovSubmit(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *JobRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSubmit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JobRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JobRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Queue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubmit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSubmit
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSubmit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Queue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobSetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubmit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSubmit
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSubmit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobSetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Priority", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Priority = float64(math.Float64frombits(v))
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodSpec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubmit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSubmit
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSubmit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PodSpec == nil {
				m.PodSpec = &v1.PodSpec{}
			}
			if err := m.PodSpec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSubmit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSubmit
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSubmit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JobCancelRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSubmit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JobCancelRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JobCancelRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubmit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSubmit
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSubmit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobSetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubmit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSubmit
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSubmit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobSetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Queue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubmit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSubmit
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSubmit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Queue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSubmit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSubmit
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSubmit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JobSubmitResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSubmit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JobSubmitResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JobSubmitResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubmit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSubmit
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSubmit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSubmit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSubmit
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSubmit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Queue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSubmit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Queue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Queue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubmit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSubmit
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSubmit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriorityFactor", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.PriorityFactor = float64(math.Float64frombits(v))
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserOwners", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubmit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSubmit
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSubmit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserOwners = append(m.UserOwners, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupOwners", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubmit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSubmit
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSubmit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupOwners = append(m.GroupOwners, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSubmit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSubmit
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSubmit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CancellationResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSubmit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CancellationResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CancellationResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CancelledIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubmit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSubmit
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSubmit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CancelledIds = append(m.CancelledIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSubmit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSubmit
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSubmit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSubmit(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSubmit
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSubmit
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSubmit
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSubmit
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthSubmit
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSubmit
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSubmit(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthSubmit
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSubmit = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSubmit   = fmt.Errorf("proto: integer overflow")
)
