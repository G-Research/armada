version: 2.1

commands:
  deploy-executor:
    parameters:
      worker-id:
        type: string
        default: "1"
    steps:
      - run:
          name: "Deploy to worker << parameters.worker-id >>"
          command: |
            echo $KUBECONFIG_WORKER_<< parameters.worker-id >> | base64 -d > kubeconfig_worker_<< parameters.worker-id >>_decoded.yaml
            export KUBECONFIG=./kubeconfig_worker_<< parameters.worker-id >>_decoded.yaml
            if timeout 15 helm list; then
              helm upgrade --install armada-executor --namespace=armada ./deployment/executor/ -f ./executor_config.yaml -f ./executor_api_credentials.yaml \
              --set applicationConfig.application.clusterId="worker-pool-<< parameters.worker-id >>" \
              --set image.repository=gresearchdev/armada-executor-dev  \
              --set image.tag="${CIRCLE_SHA1}"
            else
              echo Unable to connect to worker << parameters.worker-id >>
            fi

jobs:
  build:
    machine:
      docker_layer_caching: true
      image: ubuntu-1604:201903-01
    environment:
      GO111MODULE: "on"
      GOPATH: "/home/circleci/go"
      GOCACHE: "/home/circleci/go/cache"
    working_directory: ~/go/src/github.com/G-Research/k8s-batch
    steps:
      - checkout
      - run: e2e/setup/setup_environment.sh
      - run:
          name: Start cluster for e2e tests
          command: ./e2e/setup/setup_cluster_ci.sh

      - restore_cache:
          keys:
            - machine-go-mod-v1-{{ checksum "go.sum" }}

      - run:
          name: Test
          command: make tests

      - run:
          name: Check formatting
          command: |
            exit $(go run golang.org/x/tools/cmd/goimports -l -local "github.com/G-Research/k8s-batch" . | wc -l)

      - run:
          name: Build & Run e2e tests
          command: make build-ci tests-e2e

      - store_artifacts:
          path: bin/armadactl
          destination: armadactl

      - run:
          name: Push Image
          command: |

            TAG=${CIRCLE_SHA1}

            if [ ${CIRCLE_BRANCH} != master ]
              then
                TAG=branch-${CIRCLE_BRANCH}-${CIRCLE_SHA1}
            fi

            echo ${DOCKERHUB_PASS} | docker login -u ${DOCKERHUB_USER} --password-stdin

            docker tag armada gresearchdev/armada-server-dev:${TAG}
            docker push gresearchdev/armada-server-dev:${TAG}

            docker tag armada-executor gresearchdev/armada-executor-dev:${TAG}
            docker push gresearchdev/armada-executor-dev:${TAG}

      - run: cat go.sum

      - save_cache:
          key: machine-go-mod-v1-{{ checksum "go.sum" }}
          paths:
            - "/home/circleci/go/pkg/mod"
            - "/home/circleci/go/cache"
  deploy:
    docker:
      - image: alpine/helm:2.13.1
    working_directory: /go/src/github.com/G-Research/k8s-batch
    steps:
      - checkout
      - run:
          name: "Extract config files from environment variables"
          command: |
            echo $ARMADA_CONFIG | base64 -d > armada_config.yaml
            echo $ARMADA_USERS | base64 -d > armada_users.yaml
            echo $EXECUTOR_CONFIG | base64 -d > executor_config.yaml
            echo $EXECUTOR_API_CREDENTIALS | base64 -d > executor_api_credentials.yaml
      - run:
          name: "Deploy to services"
          command: |
            echo $KUBECONFIG_SERVICES | base64 -d > kubeconfig_services_decoded.yaml
            export KUBECONFIG=./kubeconfig_services_decoded.yaml
            if timeout 15 helm list; then
              helm upgrade --install armada --namespace=armada ./deployment/armada/ -f ./armada_config.yaml -f ./armada_users.yaml --set image.repository=gresearchdev/armada-server-dev --set image.tag="${CIRCLE_SHA1}"
            else
              echo Unable to connect to services cluster
            fi
      - deploy-executor:
          worker-id: "1"
      - deploy-executor:
          worker-id: "2"
      - deploy-executor:
          worker-id: "3"
      - deploy-executor:
          worker-id: "4"
      - deploy-executor:
          worker-id: "5"

workflows:
  version: 2
  build_and_deploy:
    jobs:
      - build
      - deploy:
          requires:
            - build
          filters:
            branches:
              only: master
