version: 2.1

orbs:
  aws-cli: circleci/aws-cli@0.1.13

jobs:
  build:
    docker:
      - image: circleci/golang:1.12.6
        environment:
          GO111MODULE: "on"

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4
      - image: redis

    #### TEMPLATE_NOTE: go expects specific checkout path representing url
    #### expecting it in the form of
    ####   /go/src/github.com/circleci/go-tool
    ####   /go/src/bitbucket.org/circleci/go-tool
    working_directory: /go/src/github.com/G-Research/k8s-batch
    steps:
      - checkout
      - setup_remote_docker

      - restore_cache:
          keys:
            - go-mod-v1-{{ checksum "go.sum" }}

      - run:
          name: Test
          command: |
            go get -v -d ./...
            go test -v ./internal/...

      - save_cache:
          key: go-mod-v1-{{ checksum "go.sum" }}
          paths:
            - "/go/pkg/mod"

      - run:
          name: Check formatting
          command: exit $(gofmt -l . | wc -l)

      - run:
          name: Build
          command: make build

      - store_artifacts:
          path: armadactl
          destination: armadactl

      - aws-cli/install
      - aws-cli/configure
      - run:
          name: Push Image
          command: |

            TAG=${CIRCLE_SHA1}

            if [ ${CIRCLE_BRANCH} != master ]
              then
                TAG=branch-${CIRCLE_BRANCH}-${CIRCLE_SHA1}
            fi

            source scripts/assume-role.sh
            $(aws ecr get-login --region eu-west-1 --no-include-email)

            docker tag armada ${ECR_REPOSITORY}/armada:${TAG}
            docker push ${ECR_REPOSITORY}/armada:${TAG}

            docker tag armada-executor ${ECR_REPOSITORY}/armada-executor:${TAG}
            docker push ${ECR_REPOSITORY}/armada-executor:${TAG}
  deploy:
    docker:
      - image: alpine/helm:2.13.1
    working_directory: /go/src/github.com/G-Research/k8s-batch
    steps:
      - checkout
      - run:
          name: "Extract config files from environment variables"
          command: |
            echo $ARMADA_CONFIG | base64 -d > armada_config.yaml
            echo $ARMADA_USERS | base64 -d > armada_users.yaml
            echo $EXECUTOR_CONFIG | base64 -d > executor_config.yaml
            echo $EXECUTOR_API_CREDENTIALS | base64 -d > executor_api_credentials.yaml
      - run:
          name: "Deploy to services"
          command: |
            echo $KUBECONFIG_SERVICES| base64 -d > kubeconfig_services_decoded.yaml
            export KUBECONFIG=./kubeconfig_services_decoded.yaml
            helm upgrade armada ./deployment/armada/ -f ./armada_config.yaml -f ./armada_users.yaml --set image.tag="${CIRCLE_SHA1}"
      - run:
          name: "Deploy to worker 1"
          command: |
            echo $KUBECONFIG_WORKER_1 | base64 -d > kubeconfig_worker_1_decoded.yaml
            export KUBECONFIG=./kubeconfig_worker_1_decoded.yaml
            helm upgrade armada-executor ./deployment/executor/ -f ./executor_config.yaml -f ./executor_api_credentials.yaml --set applicationConfig.application.clusterId="worker-pool-1" --set image.tag="${CIRCLE_SHA1}"
      - run:
          name: "Deploy to worker 2"
          command: |
            echo $KUBECONFIG_WORKER_2 | base64 -d > kubeconfig_worker_2_decoded.yaml
            export KUBECONFIG=./kubeconfig_worker_2_decoded.yaml
            helm upgrade armada-executor ./deployment/executor/ -f ./executor_config.yaml -f ./executor_api_credentials.yaml --set applicationConfig.application.clusterId="worker-pool-2" --set image.tag="${CIRCLE_SHA1}"

workflows:
  version: 2
  build_and_deploy:
    jobs:
      - build
      - deploy:
          requires:
            - build
          filters:
            branches:
              only: master
